<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC02</title>
      <link href="/posts/88534fa4.html/"/>
      <url>/posts/88534fa4.html/</url>
      
        <content type="html"><![CDATA[<h1 id="分析-Spring-webmvc-的启动流程"><a href="#分析-Spring-webmvc-的启动流程" class="headerlink" title="分析 Spring webmvc 的启动流程"></a>分析 Spring webmvc 的启动流程</h1><blockquote><p>Spring MVC 是 Spring 家族中比较有特点的一员，它分离了控制器、模型对象和视图层。Spring 的 MVC 框架是围绕 DispatcherServlet 设计的，主要由 DispatcherServlet、处理器映射、控制器、视图解析器、视图组成，Spring webmvc 启动以 web.xml 为入口，进行 web 初始化，再进行 Spring MVC 初始化。</p></blockquote><a id="more"></a><h2 id="一、-web-初始化"><a href="#一、-web-初始化" class="headerlink" title="一、 web 初始化"></a>一、 web 初始化</h2><h3 id="1-1-从-xml-文件分析"><a href="#1-1-从-xml-文件分析" class="headerlink" title="1.1 从 xml 文件分析"></a>1.1 从 xml 文件分析</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册监听器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--第一次初始化的内容--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/WEB-INF/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.过滤器，非必须，但过滤器监听器正常初始化--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>      org.springframework.web.filter.CharacterEncodingFilter    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--3. 初始化（注册）Servlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol><li>Instantiate an instance of each event listener identified by a <listener> element in the deployment descriptor.</listener></li><li>For instantiated listener instances that <em>implement</em> ServletContextListener, call the contextInitialized() method.</li><li>Instantiate an instance of each filter identified by a <filter> element in the deployment descriptor and call each filter instance’s init() method.</filter></li><li>Instantiate an instance of each servlet identified by a <servlet> element that includes a <load-on-startup> element in the order defined by the load-on-startup element values, and call each servlet instance’s init() method.</load-on-startup></servlet></li></ol><ul><li>上面是官网给出的 web 的<strong>初始化</strong>过程，首先注册<strong>根监听器</strong>，接着完成第一次初始化,即注册 applicationContext，并启动 Servlet<strong>监听器</strong>；然后初始化（注册）<strong>过滤器</strong>；再初始化（注册）<strong>Servlet</strong>。其中比较重要的是 ApplicationContext 注册和 Servlet 注册。</li><li>ContextLoaderListener 类起着至关重要的作用。它读取 web.xml 中配置的 context-param 中的配置文件，提前在 web 容器初始化前准备业务对应的 Application context;<strong>将创建好的 Application context 放置于 ServletContext 中</strong>，为<strong>springMVC</strong>部分的初始化做好准备。</li><li>所以三个 xml 的加载顺序是 web.xml 创建 WebApplicationContext；<br>ApplicationContext.xml 加载 bean；至此 web 就已经加载完了，然后是 DispatchServlet.xml，它会把前两个加载的东西拿来做参数，来初始化 DispatchServlet 管控 Spring MVC 部分。</li></ul><h3 id="1-2-从类的关系理解"><a href="#1-2-从类的关系理解" class="headerlink" title="1.2 从类的关系理解"></a>1.2 从类的关系理解</h3><ul><li>最初始的类是 ContextLoader，实现了下面两个个方法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">////创建父容器context，默认是XmlWebApplicationContext</span><span class="token keyword">public</span> WebApplicationContext <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">protected</span> WebApplicationContext <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>ServletContext sc<span class="token punctuation">)</span></code></pre><ul><li>ContextLoaderListener 类,继承了 ContextLoader。实现了 ServletContextListener。</li></ul><h3 id="2-IoC-容器创建"><a href="#2-IoC-容器创建" class="headerlink" title="2. IoC 容器创建"></a>2. IoC 容器创建</h3><p>ApplicationContext 注册就是 IOC 容器的创建，实例化整个上下文中的 bean，所以 ApplicationContext.xml 是这样的：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>关于控制反转的概念，已经在上一篇博文中详细讲述，这里不再赘述，介绍几种创建 IoC 容器的方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**通过xml文件注册的bean的IoC创建*/</span><span class="token comment" spellcheck="true">//classpath</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件路径</span>ApplicationContext getApplicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"配置文件的绝对路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**通过注解注册的bean的IoC容器创建*/</span></code></pre><h3 id="3-Bean-初始化"><a href="#3-Bean-初始化" class="headerlink" title="3. Bean 初始化"></a>3. Bean 初始化</h3><h4 id="3-1-bean-的概念"><a href="#3-1-bean-的概念" class="headerlink" title="3.1 bean 的概念"></a>3.1 bean 的概念</h4><blockquote><p>在 Spring 中，由 Spring IoC 容器管理的对象叫做 beans。 bean 就是由 Spring IoC 容器实例化、组装和以其他方式管理的对象。此外 bean 只是你应用中许多对象中的一个。Spring 框架中，一旦把一个 Bean 纳入到 Spring IoC 容器之中，这个 Bean 的生命周期就会交由容器进行管理。</p></blockquote><h4 id="3-2-bean-的属性"><a href="#3-2-bean-的属性" class="headerlink" title="3.2 bean 的属性"></a>3.2 bean 的属性</h4><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">这个属性是强制性的，并且指定用来创建 bean 的 bean 类。</td></tr><tr><td align="left">name</td><td align="left">这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，至少定义一个 ID 或 name 属性来指定 bean 标识符。</td></tr><tr><td align="left">scope</td><td align="left">这个属性指定由特定的 bean 定义创建的对象的作用域</td></tr><tr><td align="left">constructor-arg</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">properties</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">autowiring mode</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">lazy-initialization mode</td><td align="left">延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。</td></tr><tr><td align="left">initialization 方法</td><td align="left">在 bean 的所有必需的属性被容器设置之后，调用回调方法。</td></tr><tr><td align="left">destruction 方法</td><td align="left">当包含该 bean 的容器被销毁时，使用回调方法。</td></tr></tbody></table><h4 id="3-3-bean-作用域"><a href="#3-3-bean-作用域" class="headerlink" title="3.3 bean 作用域"></a>3.3 bean 作用域</h4><ul><li>singleton 作用域：默认的作用域。如果你想让 Spring 在每次需要时都返回同一个 bean 实例，你应该声明 bean 的作用域的属性为 singleton。</li><li>prototype 作用域：为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 prototype。</li></ul><h4 id="3-4-生命周期"><a href="#3-4-生命周期" class="headerlink" title="3.4 生命周期"></a>3.4 生命周期</h4><ul><li>实例化：实例化一个 Bean（由 BeanFactory 读取 Bean 定义文件，并生成各个实例）－－也就是我们常说的 new（@Bean）；</li><li>设置属性：按照 Spring 上下文对实例化的 Bean 的属性值进行设置。</li><li>使用初始化：调用 bean 的初始化方法。(将 bean 实例传递给 bean 后置处理器的 postProcessBeforeInitialization()方法)</li><li>bean 可以使用了……</li><li>当容器关闭时，调用 bean 的销毁方法<blockquote><p>在配置 bean 时，通过 init-method 和 destroy-method 属性为 bean 指定初始化和销毁方法.</p></blockquote></li></ul><h4 id="bean-注入的方式"><a href="#bean-注入的方式" class="headerlink" title="bean 注入的方式"></a>bean 注入的方式</h4><ol><li>通过 xml 注入：</li></ol><ul><li>定义 bean</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String sno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>在 ApplicationContext.xml 中注册</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Bean.Student<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="2"><li>通过注解注入：</li></ol><ul><li>首先在 spring 配置文件中开启注解扫描：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.example.spring.mvc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>使用注解声明 bean:</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentHomeWorkJdbc</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>基于 java 类的配置</li></ol><ul><li>使用@Configuration 注解需要作为配置的类，表示该类将定义 Bean 的元数据</li><li>使用@Bean 注解相应的方法，该方法名默认就是 Bean 的名称，该方法返回值就是 Bean 的对象。</li><li>AnnotationConfigApplicationContext 或子类进行加载基于 java 类的配置</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MyService <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、-Spring-MVC-启动流程"><a href="#二、-Spring-MVC-启动流程" class="headerlink" title="二、 Spring MVC 启动流程"></a>二、 Spring MVC 启动流程</h2><h3 id="2-1-分析-DispatcherServlet-xml"><a href="#2-1-分析-DispatcherServlet-xml" class="headerlink" title="2.1 分析 DispatcherServlet.xml"></a>2.1 分析 DispatcherServlet.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--此文件负责整个mvc中的配置--></span>    <span class="token comment" spellcheck="true">&lt;!--启用spring的一些annotation --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置注解驱动 可以将request参数与绑定到controller参数上 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--静态资源映射--></span>    <span class="token comment" spellcheck="true">&lt;!--本项目把静态资源放在了webapp目录下，资源映射如下--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/css/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/css/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/fonts/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/fonts/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/img/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/img/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/js/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP--></span>    <span class="token comment" spellcheck="true">&lt;!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--设置JSP文件的目录位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exposeContextBeansAsAttributes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--自动扫描装配 （base-package由包名决定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="2-2-图解"><a href="#2-2-图解" class="headerlink" title="2.2 图解"></a>2.2 图解</h3><ol><li>客户端请求提交到 DispatcherServlet。</li><li>由 DispatcherServlet 控制器寻找一个或多个 HandlerMapping，找到处理请求的 Controller。</li><li>DispatcherServlet 将请求提交到 Controller。</li><li>Controller 调用业务逻辑处理后返回 ModelAndView。</li><li>DispatcherServlet 寻找一个或多个 ViewResolver 视图解析器，找到 ModelAndView 指定的视图。</li><li>视图负责将结果显示到客户端。<blockquote><p>共包含 4 个 Spring MVC 接口，即 DispatcherServlet、HandlerMapping、Controller 和 ViewResolver。</p></blockquote></li></ol><ul><li><p>Spring MVC 所有的请求都经过 DispatcherServlet 来统一分发，在 DispatcherServlet 将请求分发给 Controller 之前需要借助 Spring MVC 提供的 HandlerMapping 定位到具体的 Controller。</p></li><li><p>HandlerMapping 接口负责完成客户请求到 Controller 映射。</p></li><li><p>Controller 接口将处理用户请求，这和 Java Servlet 扮演的角色是一致的。一旦 Controller 处理完用户请求，将返回 ModelAndView 对象给 DispatcherServlet 前端控制器，ModelAndView 中包含了模型（Model）和视图（View）。</p></li><li><p>从宏观角度考虑，DispatcherServlet 是整个 Web 应用的控制器；从微观考虑，Controller 是单个 Http 请求处理过程中的控制器，而 ModelAndView 是 Http 请求过程中返回的模型（Model）和视图（View）。</p></li><li><p>ViewResolver 接口（视图解析器）在 Web 应用中负责查找 View 对象，从而将相应结果渲染给客户。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一年后再拿起VScode(1)</title>
      <link href="/posts/312e9705.html/"/>
      <url>/posts/312e9705.html/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode的代码美化–vue项目"><a href="#VScode的代码美化–vue项目" class="headerlink" title="VScode的代码美化–vue项目"></a>VScode的代码美化–vue项目</h1><p>插件：eslint+vetur+prettier</p><a id="more"></a><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p><font face="楷体" color="">一年前跟学长尝试了一个vue项目，第一次接触编辑器，以前学的C语言和Java原来编译他们那个叫IDE，是集成了编辑器和编译器的，用过ＶS studio，所以第一次拿起vscode就感觉设计哲学很符合自己的心意，但是接下来就让自己脑袋疼起来了，问题就是代码格式化。</font></p><h2 id="全局setting-json"><a href="#全局setting-json" class="headerlink" title="全局setting.json"></a>全局setting.json</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   //字符大小，可自己调整  <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>  //设置tab的站位  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  //在保存时自动格式化代码  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"source.fixAll"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  // 全局使用保存自动格式化功能，vue项目关闭此项!!!!!!!  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // 使用单引号包含字符串   <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // 不添加行尾分号  <span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  //配置终端为cmd便于使用其他命令，如hexo  <span class="token property">"terminal.integrated.shell.windows"</span><span class="token operator">:</span> <span class="token string">"C:\\WINDOWS\\System32\\cmd.exe"</span><span class="token punctuation">,</span>  <span class="token property">"git.enableSmartCommit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>值得注意的是，网上搜了很多教程，但大多数都存在的问题就是，他们的设置不是针对vue项目，而eslint、vetur、prettier这些组件的美化格式是冲突的，所以针对不同的项目要在工作区的setting.json进行不同的配置，来处理他们的冲突。</p><h2 id="工作区的setting-json"><a href="#工作区的setting-json" class="headerlink" title="工作区的setting.json"></a>工作区的setting.json</h2><pre class=" language-json"><code class="language-json">  /* 关闭编辑器自带保存格式化功能，此功能会用Vetur进行格式化。*/  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span></code></pre><p>这一点很重要。vetur可以用来识别.vue文件但是他的格式和eslint的格式不一样，默认vscode使用vetur的格式，而如果项目中引入了eslint依赖，并且setting.json中设置了eslint对html、css、js、vue的格式化，这样针对js文件就有了两种格式化，保存时总是报错（令我一度放弃过eslint）。</p><ul><li><strong>以上的设置是最基本的一些，也是最必要的。当然还有很对配置选项，都可以上官网或者一些（带注释的）教程上找</strong></li></ul><h2 id="eslintrc文件"><a href="#eslintrc文件" class="headerlink" title=".eslintrc文件"></a>.eslintrc文件</h2><p>eslint插件用于根据工程目录的.eslintrc.js配置文件在编辑器中显示一些错误提示，后面的自动格式化根据这里的错误提示进行格式化操作。前提是项目安装了eslint依赖。</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    node<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//这里对eslint和prettier的矛盾做了调整，可查看prettier官网</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span> <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span> <span class="token string">"@vue/prettier"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">"babel-eslint"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"no-console"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"warn"</span> <span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"no-debugger"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"warn"</span> <span class="token punctuation">:</span> <span class="token string">"off"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在.eslintrc.js可以看到总体的eslint规则合并了vue、eslint和prettier的一些插件库进行语法分析(eslint针对js和vue，prettier针对js、html和css,这里eslint和prettier的一些冲突已经处理)<br>eslint很强大，关于其他配置官方给出了文档，vue官方也给出了<a href="https://github.com/vuejs/eslint-config-vue" target="_blank" rel="noopener">标配</a>。<br>下面我列出某个团队自己的规范,相信能看懂，哈哈：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">'babel-eslint'</span><span class="token punctuation">,</span>    sourceType<span class="token punctuation">:</span> <span class="token string">'module'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    node<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es6<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:vue/recommended'</span><span class="token punctuation">,</span> <span class="token string">'eslint:recommended'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add your custom rules here</span>  <span class="token comment" spellcheck="true">//it is base on https://github.com/vuejs/eslint-config-vue</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"vue/max-attributes-per-line"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">"singleline"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      <span class="token string">"multiline"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"max"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"allowFirstLine"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"vue/singleline-html-element-content-newline"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"vue/multiline-html-element-content-newline"</span><span class="token punctuation">:</span><span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"vue/name-property-casing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"PascalCase"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"vue/no-v-html"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">'accessor-pairs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'arrow-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'block-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'brace-style'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1tbs'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'allowSingleLine'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'camelcase'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'properties'</span><span class="token punctuation">:</span> <span class="token string">'always'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-dangle'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-style'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'last'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'constructor-super'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'curly'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'multi-line'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'dot-location'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'property'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'eol-last'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'eqeqeq'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"null"</span><span class="token punctuation">:</span> <span class="token string">"ignore"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'generator-star-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'handle-callback-err'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'^(err|error)$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'indent'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'SwitchCase'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'jsx-quotes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'prefer-single'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'key-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'beforeColon'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'afterColon'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'keyword-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'new-cap'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'newIsCap'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'capIsNew'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'new-parens'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-array-constructor'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-caller'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-console'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'no-class-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-cond-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-const-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-control-regex'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'no-delete-var'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-args'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-class-members'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-keys'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-duplicate-case'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-empty-character-class'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-empty-pattern'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-eval'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-ex-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extend-native'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-bind'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-boolean-cast'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-parens'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'functions'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-fallthrough'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-floating-decimal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-func-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-implied-eval'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-inner-declarations'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'functions'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-invalid-regexp'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-irregular-whitespace'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-iterator'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-label-var'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-labels'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'allowLoop'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'allowSwitch'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-lone-blocks'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-mixed-spaces-and-tabs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multi-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multi-str'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multiple-empty-lines'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-native-reassign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-negated-in-lhs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-object'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-require'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-symbol'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-wrappers'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-obj-calls'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-octal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-octal-escape'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-path-concat'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-proto'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-redeclare'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-regex-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-return-assign'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'except-parens'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-self-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-self-compare'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-sequences'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-shadow-restricted-names'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-spaced-func'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-sparse-arrays'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-this-before-super'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-throw-literal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-trailing-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-undef'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-undef-init'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unexpected-multiline'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unmodified-loop-condition'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unneeded-ternary'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'defaultAssignment'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-unreachable'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unsafe-finally'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unused-vars'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'vars'</span><span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>      <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token string">'none'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-call'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-computed-key'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-constructor'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-escape'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'no-whitespace-before-property'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-with'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'one-var'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'initialized'</span><span class="token punctuation">:</span> <span class="token string">'never'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'operator-linebreak'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'overrides'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'before'</span><span class="token punctuation">,</span>        <span class="token string">':'</span><span class="token punctuation">:</span> <span class="token string">'before'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'padded-blocks'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'quotes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'single'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'avoidEscape'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'allowTemplateLiterals'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'semi'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'semi-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-before-blocks'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-before-function-paren'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-in-parens'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-infix-ops'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'space-unary-ops'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'words'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'nonwords'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'spaced-comment'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'markers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'globals'</span><span class="token punctuation">,</span> <span class="token string">'eslint'</span><span class="token punctuation">,</span> <span class="token string">'eslint-disable'</span><span class="token punctuation">,</span> <span class="token string">'*package'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'template-curly-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'use-isnan'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'valid-typeof'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'wrap-iife'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'any'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'yield-star-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'both'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'yoda'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'prefer-const'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-debugger'</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'object-curly-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      objectsInObjects<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'array-bracket-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="prettierrc文件"><a href="#prettierrc文件" class="headerlink" title=".prettierrc文件"></a>.prettierrc文件</h2><p>在文件根目录下创建.prettierrc对prettier格式化进行自定义规则设置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  /* 使用单引号包含字符串 */  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /* 不添加行尾分号 */  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  /* 在对象属性添加空格 */  <span class="token property">"bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /* 优化html闭合标签不换行的问题 */  <span class="token property">"htmlWhitespaceSensitivity"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">}</span></code></pre><p>以上就是我的最基本的配置，如有更多关于vscode美化代码的建议，欢迎评论。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次用Git必看</title>
      <link href="/posts/ff30c72a.html/"/>
      <url>/posts/ff30c72a.html/</url>
      
        <content type="html"><![CDATA[<h1 id="git-使用细则"><a href="#git-使用细则" class="headerlink" title="git 使用细则"></a>git 使用细则</h1><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><blockquote><p><a href="https://git-scm.com/" target="_blank" rel="noopener">官网下载地址</a>git， 安装目录尽量不要选在系统盘，更改环境变量 HOME 的的值，可以更改 git bash 的默认工作区，即“~”的位置。在 HOME 值对应的目录下，.gitconfig 文件是 git 的全局配置文件。</p></blockquote> <a id="more"></a><h2 id="git-账户配置"><a href="#git-账户配置" class="headerlink" title="git 账户配置"></a>git 账户配置</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name  <span class="token string">"username"</span>  <span class="token comment" spellcheck="true">#--global全局配置，用户级别</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail@example.com"</span></code></pre><h2 id="git-远程仓库使用"><a href="#git-远程仓库使用" class="headerlink" title="git 远程仓库使用"></a>git 远程仓库使用</h2><ul><li>git 常用的远程仓库有<a href="https://github.com/" target="_blank" rel="noopener">github</a>,<a href="https://gitee.com/" target="_blank" rel="noopener">gitee</a>,<a href="https://about.gitlab.com/" target="_blank" rel="noopener">gitlab</a>等</li><li>git 采用 ssh 协议传输，生成传输公钥：</li></ul><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span></code></pre><p>接下来系统提示命名文件名，并输入密码</p><pre class=" language-bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/e/Git/.ssh/id_rsa<span class="token punctuation">)</span>: a <span class="token comment" spellcheck="true">#&lt;filename>默认 id_rsa</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:<span class="token comment" spellcheck="true">#&lt;password> 一般两次Enter即可</span>Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> a.Your public key has been saved <span class="token keyword">in</span> a.pub.The key fingerprint is:<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><ul><li>生成的公钥是在.ssh 文件夹下的 xx.pub 文件，在 git 远程仓库账户下添加公钥。</li></ul><h3 id="远程仓库项目本地更改"><a href="#远程仓库项目本地更改" class="headerlink" title="远程仓库项目本地更改"></a>远程仓库项目本地更改</h3><h4 id="从远程仓库-clone"><a href="#从远程仓库-clone" class="headerlink" title="从远程仓库 clone"></a>从远程仓库 clone</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span>  <span class="token comment" spellcheck="true"># 结尾是.git</span><span class="token function">cd</span> 仓库名<span class="token function">git</span> config --local -l  <span class="token comment" spellcheck="true">#check the config information of local</span>或者 <span class="token function">git</span> remote -v     <span class="token comment" spellcheck="true">#查看远程仓库地址</span></code></pre><ul><li>一般是 clone 的远程仓库地址，.git 文件夹存在证明是 git 本地仓库。<br>.gitignore 文件是配置 git 上传时忽略哪些文件。</li></ul><h4 id="push-到远程仓库"><a href="#push-到远程仓库" class="headerlink" title="push 到远程仓库"></a>push 到远程仓库</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add * 或 <span class="token function">git</span> add <span class="token operator">&lt;</span>filename<span class="token operator">></span> <span class="token comment" spellcheck="true">#添加到本地仓库暂存区（Staging area）</span><span class="token function">git</span> commit -m <span class="token string">"做了哪些更改"</span>     <span class="token comment" spellcheck="true">#提交到本地仓库版本库</span><span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span><span class="token comment" spellcheck="true">#要push的目标远程仓库地址</span><span class="token function">git</span> status                     <span class="token comment" spellcheck="true">#查看git工作区（ working tree）状态</span><span class="token function">git</span> push -u origin master <span class="token comment" spellcheck="true"># 将工作区的master分支推送到远程仓库master分支</span></code></pre><ul><li>-u 参数：远程仓库没有该分支即创建，并且把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。</li></ul><h3 id="本地新项目上传到远程仓库"><a href="#本地新项目上传到远程仓库" class="headerlink" title="本地新项目上传到远程仓库"></a>本地新项目上传到远程仓库</h3><ul><li>在项目根目录 git bash here</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init  <span class="token comment" spellcheck="true">#初始化git版本库，生成.git文件夹</span><span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span><span class="token function">git</span> add *<span class="token function">git</span> commit -m <span class="token string">"做了哪些更改"</span><span class="token function">git</span> push -u origin master</code></pre><ul><li><h5 id="错误一：远程仓库已经更改"><a href="#错误一：远程仓库已经更改" class="headerlink" title="错误一：远程仓库已经更改"></a>错误一：远程仓库已经更改</h5>如果此时报错如下：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        master -<span class="token operator">></span> master <span class="token punctuation">(</span>fetch first<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'https://github.com/SingleMY/MoYang.git'</span>hint: Updates were rejected because the remote contains work that you <span class="token keyword">do</span>hint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: <span class="token punctuation">(</span>e.g., <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.</code></pre><blockquote><p>说明远程仓库和本地版本库比对后，有的文件只在远程仓库有，本地版本库中没有，此时需要 pull 远程仓库文件到本地版本库：</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/master  master     <span class="token comment" spellcheck="true">#把远程分支与本地分支关联</span><span class="token function">git</span> pull</code></pre><ul><li><h5 id="错误二：未关联分支"><a href="#错误二：未关联分支" class="headerlink" title="错误二：未关联分支"></a>错误二：未关联分支</h5>如果不关联分支会报错：</li></ul><pre class=" language-bash"><code class="language-bash">There is no tracking information <span class="token keyword">for</span> the current branch.Please specify <span class="token function">which</span> branch you want to merge with.See git-pull<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token keyword">for</span> details.    <span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span>If you wish to <span class="token keyword">set</span> tracking information <span class="token keyword">for</span> this branch you can <span class="token keyword">do</span> so with:    <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span> master</code></pre><blockquote><p>使用 git 在本地新建一个分支后，需要做远程分支关联。如果没有关联，git 会在下面的操作中提示你显示的添加关联。<br>关联目的是在执行 git pull, git push 操作时就不需要指定对应的远程分支，你只要没有显示指定，git pull 的时候，就会提示你。解决办法如上。</p></blockquote><ul><li><h5 id="错误三"><a href="#错误三" class="headerlink" title="错误三"></a>错误三</h5></li></ul><pre class=" language-bash"><code class="language-bash">fatal: refusing to merge unrelated histories</code></pre><blockquote><p>这个问题是因为两个根本不相干的 git 库，一种方法是从远端库拉下来代码，本地要加入的代码放到远端库下载到本地的库，然后提交上去因为这样的话，你基于的库就是远端的库。当然这样处理过于麻烦，可以使用强制指令：</p></blockquote><pre class=" language-bash"><code class="language-bash"> <span class="token function">git</span> pull --allow-unrelated-histories</code></pre><p>然后正常 push 就可以了，以上问题一般是因为远程仓库有个 README.md 文件，<strong>最好的解决办法就是建仓库时别勾选任何，建一个空的仓库。</strong></p><h3 id="git-版本控制技术的工作原理"><a href="#git-版本控制技术的工作原理" class="headerlink" title="git 版本控制技术的工作原理"></a>git 版本控制技术的工作原理</h3><p><img src="http://qiniu.1542051400.club/blog/git1.png" alt="git原理"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始基于Hexo+GitHub搭建blog的历程</title>
      <link href="/posts/1c6b95f8.html/"/>
      <url>/posts/1c6b95f8.html/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><hr><p><font face="楷体" color="">　　作为软件工程专业大三的学生，随着接触的专业知识越来越多，搭建博客是必要的，当然可以选择当下受欢迎的博客网站<a href="https://www.csdn.net/" target="_blank" rel="noopener" title="CSDN博客首页">CSDN</a>、<a href="https://www.cnblogs.com/" target="_blank" rel="noopener" title="cnblog首页">博客园</a>和<a href="https://www.jianshu.com/" target="_blank" rel="noopener" title="简书首页">简书</a>等，我在这几个网站也都注册了账号，但在别人的网站总是有“约束”，不能体现一个软件开发者的追求，也不能满足我对知识的需求。但可以把自己的好文章多发布几个平台，增加阅读量。用框架搭建自己的博客也很简单，当然也可以自己写网站（后续更新）。闲话不多说，上干货。</font></p><a id="more"></a><h1 id="简介-本文只针对-Windows-平台"><a href="#简介-本文只针对-Windows-平台" class="headerlink" title="简介 (本文只针对 Windows 平台)"></a>简介 <font size="3">(本文只针对 Windows 平台)</font></h1><hr><ul><li>首先，<a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="noopener" title="What is Github?">Github</a>提供代码托管功能，<a href="https://pages.github.com/" target="_blank" rel="noopener" title="What is Github Pages?">GitHub Page</a>可以把 GitHub 仓库中某一分支的代码由 HTTP 访问到,这两部分提供良好的服务器；接下来，前端网页使用<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener" title="博客框架">Hexo</a>简洁的博客框架构建；最后一步，就是把在本地编辑好的博客页面部署在 GitHub 上。</li></ul><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><ol><li><h2 id="关于-Hexo"><a href="#关于-Hexo" class="headerlink" title="关于 Hexo"></a>关于 Hexo</h2></li></ol><ul><li><p>Hexo 是博客<a href="https://www.zhihu.com/question/19558524" target="_blank" rel="noopener" title="什么是框架？">框架</a>，框架特点是<em>快速、简洁且高效</em>，Hexo 使用 <a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener" 菜鸟教程markdown""="">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></li><li><p>Hexo 基于<a href="https://nodejs.org/en/" target="_blank" rel="noopener" title="Node.js官网下载">Node.js</a>（简单说 Node.js 就是 JavaScript 的解析器）,并且我们通常使用 hexo 关于 git 管理组件：<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener" title="Git deployer plugin for Hexo">hexo-delopyer-git</a>发布博客文章,所以<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener" title="中文官网教程">安装 Hexo</a>前一般先安装<strong>Node.js</strong>和<strong>Git</strong>环境。</p></li></ul><h1 id="搭建历程"><a href="#搭建历程" class="headerlink" title="搭建历程"></a>搭建历程</h1><hr><ol><li><h2 id="在-GitHub-上建仓库"><a href="#在-GitHub-上建仓库" class="headerlink" title="在 GitHub 上建仓库"></a>在 GitHub 上建仓库</h2></li></ol><ul><li><h3 id="注册登录账号（有账号请略过）"><a href="#注册登录账号（有账号请略过）" class="headerlink" title="注册登录账号（有账号请略过）"></a>注册登录账号（有账号请略过）</h3></li></ul><p>访问<a href="https://github.com/" target="_blank" rel="noopener">github</a>官网首页，输入邮箱地址，点击 Get started 按钮，然后填写用户名、密码等信息提交即可。</p><p>点击<a href="https://github.com/login" target="_blank" rel="noopener">Sign in</a>按钮,输入用户名、密码登录即可。</p><ul><li><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3></li></ul><p>点击右上角的“+”，选择 new repository，然后填写仓库的相关信息，仓库名定义为: <em>你的用户名.github.io</em>　并且不能让仓库为空，可以勾选初始化一个 README.md 文件。然后完成即可。</p><blockquote><p><font face="“黑体”" size="3">注意: Github Pages 的 Repository 名字是特定的，比如我 Github 账号是 moyang0909，那么我 Github Pages Repository 名字就是 _moyang0909.github.io_。 </font></p></blockquote><ul><li><h3 id="使用-Github-Pages"><a href="#使用-Github-Pages" class="headerlink" title="使用 Github Pages"></a>使用 Github Pages</h3></li></ul><p>点击右上角 Setting 按钮，看到仓库设置信息，找到 GitHub Pages 选项，<br>看到如下图所示，表示仓库 master 分支代码可在 GitHub Pages 上成功访问了，试试在浏览器的地址栏输入”你 github 的用户名.github.io”吧！。图上箭头所指处是用于<a href="https://www.jianshu.com/p/da20ddc03cdf" target="_blank" rel="noopener" title="仅供参考">绑定自己的域名</a>，这里先不绑定了。</p><ol start="2"><li><h2 id="本地安装-Git-环境"><a href="#本地安装-Git-环境" class="headerlink" title="本地安装 Git 环境"></a>本地安装 Git 环境</h2></li></ol><ul><li><h3 id="Git-是什么"><a href="#Git-是什么" class="headerlink" title="Git 是什么"></a>Git 是什么</h3></li></ul><blockquote><p>如果不了解 Git 是什么，可以参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener" title="最好的Git教程">廖雪峰老师的 Git 教程</a>或者<a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_1_0" target="_blank" rel="noopener" title="理解Git工作原理">张果老师的 Git 笔记</a>。简言之，Git 是分布式版本控制系统，这里我们用它连接远程的 github 仓库，管理代码，值得说的一点是有了 git 我们可以不用点击网页就可以下载 github 上的代码，只需要记得几个 git 命令，很方便、流行。</p></blockquote><ul><li><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3></li></ul><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">官网下载 Git</a>安装程序，选择下载<em>64-bit Git for Windows Setup</em>。</p><p>下载完成后运行程序，一直 Next 配置默认就好了，如果需要设置就要仔细读一下安装界面上的选项。安装完成后打开 Git bash(Git 的命令行工具)，如下图。</p><p>我这里把起始位置设置为 E:/Git 文件夹，就是在环境变量中找到系统变量的 HOME 值修改即可，不改也可以。还需要最后一步设置，在 bash 命令行输入：（小提示：git bash 的粘贴键是键盘的<em>insert</em>键）</p><pre class=" language-bash"><code class="language-bash">  $ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>  $ <span class="token function">git</span> config --global user.email <span class="token string">"youremail@example.com"</span></code></pre><blockquote><p>注意 git config 命令的–global 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置。</p></blockquote><ul><li><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3></li></ul><p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以，需要一点设置:</p><p><strong>第 1 步：创建 SSH Key:</strong></p><p>在 bash 命令行输入：</p><pre class=" language-bash"><code class="language-bash"> $ ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span></code></pre><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可。如果一切顺利的话，可以在用户主目录里找到.ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件。</p><p><strong>第 2 步：登陆 GitHub，打开“Settings”，“SSH Keys”页面：</strong></p><p>然后，点“Add SSH Key”，填上任意 title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。</p>{% asset_img git-04.png github 托管 %}<p>点击“Add SSH key”，你就应该看到已经添加的 key。Git 还有很多知识，比如它可以本地版本库，可以多人协作等等……</p><p><strong>至此，有关 Github 的工作就完成了！恭喜你完成了三分之一！</strong></p><blockquote><blockquote><p>我们休息一会……</p></blockquote></blockquote><ol start="3"><li><h2 id="安装-Node-js-和-Hexo"><a href="#安装-Node-js-和-Hexo" class="headerlink" title="安装 Node.js 和 Hexo"></a>安装 Node.js 和 Hexo</h2></li></ol><ul><li><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener" title="中文官网下载地址">官网下载 Node.js</a>安装程序，建议下载稳定版本。</li></ul>{% asset_img node-01.png node 官网 %}<p>下载完成后启动安装程序，也是一直 Next，选择一个自定义的安装路径，比如我的安装路径为 D:\development environment\node\。接着要配置环境变量：</p>{% asset_img node-02.png 环境变量 %}<p>打开控制面板，找到系统属性，依次点击高级系统设置，环境变量，找到用户变量下的 Path 变量，双击编辑添加值为 Node.js 的安装路径。然后一路确定保存设置即可。</p>{% asset_img node-03.png 环境变量添加 %}<ul><li><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3></li></ul><p>打开命令行，进入 Node.js 的安装目录，执行如下命令：</p><pre class=" language-npm"><code class="language-npm">  npm install -g hexo</code></pre><p>或</p><pre class=" language-npm"><code class="language-npm">  npm install -g hexo-cli</code></pre><p>使用<a href="https://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener" title="What is npm?">npm</a>命令全局安装 hexo 完成,命令行别关。</p><ol start="4"><li><h2 id="建立博客网站"><a href="#建立博客网站" class="headerlink" title="建立博客网站"></a>建立博客网站</h2></li></ol><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class=" language-hexo"><code class="language-hexo">  hexo init <folder>  cd <folder>  npm install          //安装依赖包</code></pre><p><strong>至此，博客搭建成功</strong>！当然，仅仅是本地的，革命尚未成功。<br>新建完成后，指定文件夹的目录如下：</p><ul><li><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3></li></ul><blockquote><p>其中<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener" title="修改配置">_config.yml</a>文件是配置信息文件，接下来我们来熟悉、并修改以下内容。</p></blockquote><pre><code>  title:        网站标题//修改为自己的网站名  author:       您的名字  language:     网站使用的语言。//使用不同的主题可能需要设置 成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Han和 zh-CN。  timezone:     网站时区。//Hexo 默认使用您电脑的时区。一般的，可以使用 Asia/Shanghai。  url:          网址//修改为你的github pages地址  theme:        当前主题名称。//暂时不修改一会更改主题时需要修改这里</code></pre><p>以下三个参数尤其重要：</p><p><strong>如果某一项参数没有就新建，注意冒号后边有空格。如果你忘记了 github 代码仓库的 clone 地址，可以打开把图上的 SingleMY 换成你的 github 账户名。<a href="https://github.com/你的github账户/你的github账户.github.io.git" target="_blank" rel="noopener">https://github.com/你的github账户/你的github账户.github.io.git</a></strong></p><p>接下来，回到你的 cmd 窗口，执行如下命令：</p><pre><code>  npm install hexo-deployer-git --save  hexo g   (生成静态页面)  hexo d   (将本地blog部署到github的仓库)</code></pre><p>现在，试试在浏览器的地址栏输入：“你的用户名.github.io”，此时，你应该会看到这样的界面：</p><blockquote><p><strong>至此，一个博客框架就这样部署完了，接下来我们熟悉下这个框架的结构，并且更改下主题，因为这个主题实在是太丑了</strong></p></blockquote><ul><li><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3></li></ul><p><a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener" title="中文官网主题介绍">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><blockquote><p>可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网选择主题</a>，下载按钮是蓝色粗体标题字样。更推荐点击<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener" title="下载主题">这里</a><br>选择自己喜欢的主题，其中较为流行的一个是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>，不过我更喜欢<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">yilia-plus</a>。</p></blockquote><blockquote><p>在刚刚那个网站上，点击右边的链接可以看到主题的 Demo，选则一个喜欢的主题然后点击左边的链接进入 github 上（以 yilia-plus 为例）：</p></blockquote><p>按上图所示，依次执行命令：</p><pre class=" language-git"><code class="language-git">  cd ./themes/  git clone --depth=1 https://github.com/JoeyBling/hexo-theme-yilia-plus.git ./yilia-plus</code></pre><p>这时你会发现 themes 文件夹下多了一个 yilia-plus 文件夹。</p><p>然后修改 hexo 根目录下的 _config.yml ➡️ <strong>theme: yilia-plus</strong>。</p><blockquote><p>选择它的原因除了美观以外，最重要的原因是它功能集成的全，当然这都需要自己一步步完成。参考它的 github 网站。</p></blockquote><blockquote><p>如果你也选择了这个主题，很高兴接下来我将对这个主题进行一步步的探索，完善功能。<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus/wiki/yilia-plus%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA%E9%A1%BB%E7%9F%A5" target="_blank" rel="noopener">yilia-plus 的构建须知</a>，值得注意的是需要安装 ejs - 前端模板、sass - css 预编译和 webpack - 构建工具，都可以通过 npm 安装：</p></blockquote><pre class=" language-npm"><code class="language-npm">  npm install ejs  npm install -g sass  npm install webpack -g</code></pre><blockquote><p>关于主题的配置文件，参考作者提供默认配置即可，然后把作者的相关信息替换成自己的即可。注解已经很详细，就是功能尚不完善。</p></blockquote><blockquote><p>打开命令行进入博客根目录，执行如下命令：</p></blockquote><pre><code> hexo clean  (清除public下的静态文件) hexo g     （重新生成静态blog） hexo d     （将本地blog部署到github的仓库） //每次对博客更改后，都执行这几条命令，部署博客。</code></pre><blockquote><p>好了，试试在浏览器的地址栏输入：“你的 github 用户名.github.io”，你将会看到如下主题的 blog 页面：</p></blockquote><blockquote><p>当然，左侧的 GIF 动图和下雪特效以及头像等都需要修改<a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">主题目录</a>下的文件。<em>好了，关于主题我一时半会也讲不清楚，后续我会继续记录自己应用各种功能的过程，敬请关注！</em>看作者的博客请点击<a href="https://zhousiwei.gitee.io/" target="_blank" rel="noopener">这里</a>。</p></blockquote><ul><li><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3></li></ul><blockquote><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener" title="中文官网模板介绍">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo 的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改 scaffold/post.md 中的 Front-matter 内容，那么每次新建一篇文章时都会包含这个修改。</p></blockquote><p>关于模板，只需要了解到它默认有三种形式（layout），分别是 post，page 和 draft。当你执行创建一篇新的文章命令：</p><pre class=" language-hexo"><code class="language-hexo">  hexo new [layout] <title></code></pre><blockquote><p>如果不选择 layout（模板）种类，默认是 post，会根据配置信息在 source 文件夹下的_post 文件夹下生成一个名为 title.md 的文件，如 hexo new “Hello world”。模板可以自定义。</p></blockquote><ul><li><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。简单的理解就是我们新建 Markdown 格式文章放在该文件夹下的_post 文件夹下，就会被发布在博客网站上。<br>新建文章的指令上面我们已经提到，不再重复。注意，修改主目录下的_config.yml 的</li></ul>{% asset_img asset.png assets %}<blockquote><p>Hexo 将会在你每一次通过</p></blockquote><pre class=" language-hexo"><code class="language-hexo">  hexo new [layout] <title></code></pre><p>命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们。如你把一个 example.jpg 图片放在了你的资源文件夹中，正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><pre><code>{% asset_img example.jpg This is an example image %}</code></pre><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><blockquote><p><strong>至此关于 hexo 的介绍就结束了，我只不过是把一些资料整理了下，按自己学习的历程介绍下，希望能有所帮助。</strong></p></blockquote><h2 id="浅谈-Markdown"><a href="#浅谈-Markdown" class="headerlink" title="浅谈 Markdown"></a>浅谈 Markdown</h2><blockquote><p>我们平时使用的 word 等软件一般是富文本编辑，富文本格式（Rich Text Format, 一般简称为 RTF）是由微软公司开发的跨平台文档格式。最大的特点是：<strong>所见即所得</strong>。比如可以直接把字体变粗，添加颜色。</p></blockquote><blockquote><p>而 Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。比如“ # 一级标题 ”用#号表示一级标题会把字体格式改变。</p></blockquote><blockquote><p>刚开始使用 Markdown 写文章都会感觉太笨了这种方法，熟练<a href="https://www.runoob.com/markdown/md-block.html" target="_blank" rel="noopener">Markdown 的语法</a>规则后，发现比富文本好用很多，最大的优点就是格式统一，写出来的东西不会出现格式错误。</p></blockquote><blockquote><p>这里我推荐使用 VScode+Markdown Preview Enhanced 插件编写 Markdown 文章。我的本篇文章的 Markdown 格式上传<a href="https://gitee.com/moyanghualing/MoyangBlog" target="_blank" rel="noopener">gitee 代码仓库</a>，用了大多数常见语法，对比网站效果，初学者加以参考！</p></blockquote><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><blockquote><p>博客一直是自己想拥有的，如今能借助别人的技术，完成一个不错的简易博客已经很满意了。特别感谢文章中提到的学习网站。</p></blockquote><ul><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的官方网站</a></li><li><a href="https://zhousiwei.gitee.io/" target="_blank" rel="noopener">試毅-思伟的个人博客</a></li><li><a href="https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html" target="_blank" rel="noopener">Hexo+github 搭建个人博客</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
