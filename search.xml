<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux（非专业linux编程学生常用命令）</title>
      <link href="/posts/8f1bc9fd.html/"/>
      <url>/posts/8f1bc9fd.html/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是针对网站开发服务器部署时常用的命令进行总结的，作者学过一点点Linux网络编程的基础知识。</p><h2 id="最常用的18个命令总结"><a href="#最常用的18个命令总结" class="headerlink" title="最常用的18个命令总结"></a>最常用的18个命令总结</h2><blockquote><p>ls cd pwd mkdir <strong>vim</strong>  chmod <strong>yum</strong> whereis cat wget tar   rm cp mv man sed grep awk </p></blockquote><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限和查看目录信息等等</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">ls</span> -a 列出目录所有文件，包含以.开始的隐藏文件 <span class="token function">ls</span> -t 以文件修改时间排序 <span class="token function">ls</span> -S 以文件大小排序 <span class="token function">ls</span> -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>cd(changeDirectory) 命令语法：</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">cd</span> <span class="token punctuation">[</span>目录名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>pwd 命令用于查看当前工作目录路径。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">pwd</span> -P 查看软链接的实际路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>mkdir 命令用于创建文件夹。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /tmp/test <span class="token comment" spellcheck="true">#在 tmp 目录下创建路径为 test 的目录，若不存在，则创建</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p><a href="https://zhuanlan.zhihu.com/p/89042423" target="_blank" rel="noopener">vim编辑器</a>，编辑文件</p><pre class="line-numbers language-bash"><code class="language-bash"> vim <span class="token punctuation">[</span>文件路径/文件名<span class="token punctuation">]</span> insert <span class="token comment" spellcheck="true">#进入插入模式</span> Esc :wq  <span class="token comment" spellcheck="true">#保存并退出</span> :q<span class="token operator">!</span>  <span class="token comment" spellcheck="true">#不保存退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>修改文件权限,权限类型一般包括读，写，执行。对应字母为 r、w、x,r=4，w=2，x=1,拥有者 、群组 、其它组 、所有的用户及群组( u、 g 、o 、a)  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x filename<span class="token function">chmod</span> 777 filename <span class="token operator">=</span> <span class="token function">chmod</span> ugo+rwx filename <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看权限：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ls</span> -l test.txt-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行</p></blockquote><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>包管理</p><pre class="line-numbers language-bash"><code class="language-bash"> yum -y <span class="token function">install</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>             <span class="token comment" spellcheck="true">#下载并安装一个rpm包</span> yum localinstall <span class="token punctuation">[</span>package.rpm<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#安装一个rpm包，使用你自己的软件仓库解决所有依赖关系</span> yum -y update                         <span class="token comment" spellcheck="true">#更新当前系统中安装的所有rpm包</span> yum update <span class="token punctuation">[</span>package<span class="token punctuation">]</span>                  <span class="token comment" spellcheck="true">#更新一个rpm包</span> yum remove <span class="token punctuation">[</span>package<span class="token punctuation">]</span>                  <span class="token comment" spellcheck="true">#删除一个rpm包</span> yum list                              <span class="token comment" spellcheck="true">#列出当前系统中安装的所有包</span> yum search <span class="token punctuation">[</span>package<span class="token punctuation">]</span>                  <span class="token comment" spellcheck="true">#在rpm仓库中搜寻软件包</span> yum list <span class="token operator">|</span> <span class="token function">grep</span> xxx                      <span class="token comment" spellcheck="true">#查询xxx软件</span> yum clean <span class="token punctuation">[</span>package<span class="token punctuation">]</span>                   <span class="token comment" spellcheck="true">#清除缓存目录（/var/cache/yum）下的软件包</span> yum clean headers                     <span class="token comment" spellcheck="true">#删除所有头文件</span> yum clean all                         <span class="token comment" spellcheck="true">#删除所有缓存的包和头文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>当你不知道某个命令的位置时可以使用whereis命令</p><pre class="line-numbers language-shell"><code class="language-shell">whereis python    #寻找python命令的位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><pre class="line-numbers language-shell"><code class="language-shell">which     查看可执行文件的位置。whereis 查看文件的位置。locate  配合数据库查看文件位置。find        实际搜寻硬盘查询文件名称。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>查看文件的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> filename<span class="token function">cat</span> <span class="token operator">></span> filename <span class="token comment" spellcheck="true">#从键盘创建一个文件</span><span class="token function">cat</span> file1 file2 <span class="token operator">></span> <span class="token function">file</span> <span class="token comment" spellcheck="true">#合并文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>uri下载资源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> <span class="token punctuation">[</span>uri<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。</p><blockquote><p>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">-c 建立新的压缩文件-f 指定压缩文件-r 添加文件到已经压缩文件包中-u 添加改了和现有的文件到压缩包中-x 从压缩包中抽取文件-t 显示压缩文件中的内容-z 支持gzip压缩-j 支持bzip2压缩-Z 支持compress解压文件-v 显示操作过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般：</p><pre class="line-numbers language-shell"><code class="language-shell">tar -xvf archive.tar                  #释放一个包tar cvf FileName.tar DirName          #打包（不压缩）tar zxvf FileName.tar.gz              #解压tar zcvf FileName.tar.gz DirName      #压缩unzip FileName.zip                    #解压zip FileName.zip DirName              #压缩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p><pre class="line-numbers language-shell"><code class="language-shell">rm [选项] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">rm -rf test #删除 test 子目录及子目录中所有档案删除，并且不用一一确认rm -i *.log #删除任何 .log 文件，删除前逐一询问确认：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><blockquote><p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p></blockquote><p>参数：</p><pre class="line-numbers language-shell"><code class="language-shell">-i 提示-r 复制目录及目录内所有项目-a 复制的文件与原文件时间一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><pre class="line-numbers language-shell"><code class="language-shell">mv -i log1.txt log2.txt #如果 file2 已经存在，则询问是否覆盖mv log1.txt log2.txt log3.txt /test3 #将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>用来查看系统命令的用法，类似于–help,退出用q键，上下键移动</p><pre class="line-numbers language-shell"><code class="language-shell">man ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>Linux sed 命令是利用脚本来处理文本文件。</p><p>命令语法：</p><pre class="line-numbers language-shell"><code class="language-shell">sed [-hnV][-e<脚本>][-f<脚本文件>][文本文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><pre class="line-numbers language-shell"><code class="language-shell">-e<脚本>或--expression=<脚本> 以选项中指定的脚本来处理输入的文本文件。-f<脚本文件>或--file=<脚本文件> 以选项中指定的脚本文件来处理输入的文本文件。-h或--help 显示帮助。-n或--quiet或--silent 仅显示脚本处理后的结果。-V或--version 显示版本信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动作说明：</p><pre class="line-numbers language-shell"><code class="language-shell">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-shell"><code class="language-shell">sed -e 4a\newLine testfile  #在testfile文件的第四行后添加一行，并将结果输出到标准输出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p><p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>命令格式：</p><pre class="line-numbers language-shell"><code class="language-shell">grep [option] pattern file|dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><pre class="line-numbers language-shell"><code class="language-shell">-A n --after-context显示匹配字符后n行-B n --before-context显示匹配字符前n行-C n --context 显示匹配字符前后n行-c --count 计算符合样式的列数-i 忽略大小写-l 只列出文件内容符合指定的样式的文件名称-f 从文件中读取关键词-n 显示匹配内容的所在文件中行数-R 递归查找文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正则表达式：</p><pre class="line-numbers language-shell"><code class="language-shell">^  #锚定行的开始 如：'^grep'匹配所有以grep开头的行。 $  #锚定行的结束 如：'grep$'匹配所有以grep结尾的行。 .  #匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。  *  #匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。.*   #一起用代表任意字符。  []   #匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。 [^]  #匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  \(..\)  #标记匹配字符，如'\(love\)'，love被标记为1。   \<      #锚定单词的开始，如:'\<grep'匹配包含以grep开头的单词的行。\>      #锚定单词的结束，如'grep\>'匹配包含以grep结尾的单词的行。x\{m\}  #重复字符x，m次，如：'0\{5\}'匹配包含5个o的行。 x\{m,\}  #重复字符x,至少m次，如：'o\{5,\}'匹配至少有5个o的行。  x\{m,n\}  #重复字符x，至少m次，不多于n次，如：'o\{5,10\}'匹配5--10个o的行。  \w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。  \W    #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  \b    #单词锁定符，如: '\bgrep\b'只匹配grep。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。</p><p>之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。awk与sed、grep一起被称为三剑客。</p><p><a href="https://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="noopener">AWK菜鸟教程传送门</a></p><p>语法：</p><pre class="line-numbers language-shell"><code class="language-shell">awk [选项参数] 'script' var=value file(s)或awk [选项参数] -f scriptfile var=value file(s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">awk '{[pattern] action}' {filenames}   #行匹配语句 awk '' 只能用单引号awk '{print $1,$4}' log.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试准备（3）</title>
      <link href="/posts/af230da0.html/"/>
      <url>/posts/af230da0.html/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要记录自己准备面试的有关vue涉及的杂碎知识。</p><h1 id="var、let和const区别"><a href="#var、let和const区别" class="headerlink" title="var、let和const区别"></a>var、let和const区别</h1><blockquote><p>es6 推崇let、const、import 和 class 命令，摒弃旧的var命令。</p></blockquote><table><thead><tr><th align="left">声明方式</th><th align="left">变量提升</th><th align="left">暂时性死区</th><th align="left">重复声明</th><th align="left">初始值</th><th align="left">作用域</th></tr></thead><tbody><tr><td align="left">var</td><td align="left">允许</td><td align="left">不存在</td><td align="left">允许</td><td align="left">不需要</td><td align="left">除块级</td></tr><tr><td align="left">let</td><td align="left">不允许</td><td align="left">存在</td><td align="left">不允许</td><td align="left">不需要</td><td align="left">块级</td></tr><tr><td align="left">const</td><td align="left">不允许</td><td align="left">存在</td><td align="left">不允许</td><td align="left">需要</td><td align="left">块级</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试准备（2）</title>
      <link href="/posts/179f6ac5.html/"/>
      <url>/posts/179f6ac5.html/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要记录针对网上搜到了面试问题进行准备的经历</p><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><p>正向代理是代理客户端，为客户端收发请求，使真实客户端对服务器不可见；而反向代理是代理服务器端，为服务器收发请求，使真实服务器对客户端不可见。<br><img src="http://qiniu.1542051400.club/singlemy/blog/20200530160722.png" alt="代理"></p><ul><li>正向代理可以用于翻墙</li><li>反向代理用于负载均衡<br><img src="http://qiniu.1542051400.club/singlemy/blog/20200530161546.png" alt="负载均衡"><br>反向代理的优势：</li><li>保护和隐藏原始资源服务器</li><li>加密和SSL加速</li><li>负载均衡</li><li>缓存静态内容</li><li>压缩</li><li>减速上传</li><li>安全</li><li>外网发布</li></ul><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>当前端页面与后台运行在不同的服务器时，就必定会出现跨域这一问题。跨域（浏览器不能执行其他网站的脚本）：它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>是指协议，域名，端口都要相同，其中有一个不同都会产生跨域，在请求数据时，浏览器会在控制台中报一个异常，提示拒绝访问。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>proxy<pre class="line-numbers language-js"><code class="language-js">proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// change xxx-api/login => mock/login</span>   <span class="token comment" spellcheck="true">// detail: https://cli.vuejs.org/config/#devserver-proxy</span>   <span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     target<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>     changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token punctuation">[</span><span class="token string">'^'</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">''</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>spring 后端拦截器cors</li></ol><h2 id="http和https协议"><a href="#http和https协议" class="headerlink" title="http和https协议"></a>http和https协议</h2><ul><li>超文本传输协议HTTP以明文方式发送内容，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息。</li><li>安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</li></ul><h3 id="HTTPS和HTTP的区别主要如下："><a href="#HTTPS和HTTP的区别主要如下：" class="headerlink" title="HTTPS和HTTP的区别主要如下："></a>HTTPS和HTTP的区别主要如下：</h3><ol><li><p>https协议需要申请SSl证书。</p></li><li><p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl（TSL）加密传输协议。</p></li><li><p>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p></li><li><p>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p></li></ol><h3 id="HTTPS的工作原理"><a href="#HTTPS的工作原理" class="headerlink" title="HTTPS的工作原理"></a>HTTPS的工作原理</h3><p>1、客户端发起HTTPS请求<br>2、服务端的配置<br>采用HTTPS协议的服务器必须要有一套CA颁发的数字证书，这套证书其实就是一对公钥和私钥。<br>3、传送证书<br>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。<br>4、客户端解析证书</p><p>这部分工作是客户端客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p><blockquote><p>TLS 的完整过程需要三个算法（协议），密钥交互算法，对称加密算法，和消息认证算法（TLS 的传输会使用 MAC(message authentication code) 进行完整性检查）。<br><a href="https://hit-alibaba.github.io/interview/basic/network/HTTPS.html" target="_blank" rel="noopener">HTTPS协议传送门</a></p></blockquote><p>5、传送加密信息<br>6、服务段解密信息<br>7、传输加密后的信息<br>8、客户端解密信息</p><h2 id="跨站攻击"><a href="#跨站攻击" class="headerlink" title="跨站攻击"></a>跨站攻击</h2><h3 id="CSRF（Cross-site-request-forgery，跨站请求伪造）"><a href="#CSRF（Cross-site-request-forgery，跨站请求伪造）" class="headerlink" title="CSRF（Cross-site request forgery，跨站请求伪造）"></a>CSRF（Cross-site request forgery，跨站请求伪造）</h3><p>伪造请求，冒充用户在站内的正常操作</p><h4 id="如何防范-CSRF-攻击？"><a href="#如何防范-CSRF-攻击？" class="headerlink" title="如何防范 CSRF 攻击？"></a>如何防范 CSRF 攻击？</h4><ul><li>关键操作只接受 POST 请求</li><li>验证码</li><li>检测 Referer</li><li>Token<br>注意：过滤用户输入的内容不能阻挡 csrf，我们需要做的是过滤请求的来源。<h3 id="XSS（Cross-Site-Scripting，跨站脚本攻击）"><a href="#XSS（Cross-Site-Scripting，跨站脚本攻击）" class="headerlink" title="XSS（Cross Site Scripting，跨站脚本攻击）"></a>XSS（Cross Site Scripting，跨站脚本攻击）</h3>XSS 全称“跨站脚本”，是<strong>注入</strong>攻击的一种。<h4 id="如何防御-XSS-攻击？"><a href="#如何防御-XSS-攻击？" class="headerlink" title="如何防御 XSS 攻击？"></a>如何防御 XSS 攻击？</h4>防御 XSS 攻击最简单直接的方法，就是过滤用户的输入。<br><code>HtmlUtils.htmlEscape()</code></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ol><li>TCP三次握手连接建立过程</li></ol><p>Step1：客户端发送一个SYN=1，ACK=0标志的数据包给服务端，请求进行连接，这是第一次握手；</p><p>Step2：服务端收到请求并且允许连接的话，就会发送一个SYN=1，ACK=1标志的数据包给发送端，告诉它，可以通讯了，并且让客户端发送一个确认数据包，这是第二次握手；</p><p>Step3：服务端发送一个SYN=0，ACK=1的数据包给客户端，告诉它连接已被确认，这就是第三次握手。TCP连接建立，开始通讯。</p><ol start="2"><li>TCP的四次挥手<br>TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close() 操作即可产生挥手操作。<br><img src="http://qiniu.1542051400.club/singlemy/blog/20200530212550.png" alt="四次挥手"></li></ol><ul><li>第一次挥手(FIN=1，seq=x)</li></ul><p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p><p>发送完毕后，客户端进入 FIN_WAIT_1 状态。</p><ul><li>第二次挥手(ACK=1，ACKnum=x+1)</li></ul><p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p><p>发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p><ul><li>第三次挥手(FIN=1，seq=y)</li></ul><p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p><p>发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。</p><ul><li>第四次挥手(ACK=1，ACKnum=y+1)</li></ul><p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。</p><p>服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p><p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。</p><h3 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h3><blockquote><p>服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。</p></blockquote><p>SYN 攻击指的是，在半连接状态，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p><blockquote><p>SYN 攻击是一种典型的 DoS/DDoS 攻击。</p></blockquote><ul><li><p>如何检测 SYN 攻击？<br>当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。</p></li><li><p>如何防御 SYN 攻击？<br>SYN攻击不能完全被阻止，除非将TCP协议重新设计。</p><blockquote><ul><li>缩短超时（SYN Timeout）时间</li></ul></blockquote><ul><li>增加最大半连接数</li><li>过滤网关防护</li><li>SYN cookies技术</li></ul></li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><ul><li>UDP 缺乏可靠性。UDP 本身不提供确认，序列号，超时重传等机制。</li><li>UDP 数据报是有长度的。</li><li>UDP 是无连接的。</li><li>UDP 支持多播和广播。</li></ul><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p><img src="http://qiniu.1542051400.club/singlemy/blog/20200530220747.png" alt="OSI七层模型与TCP/IP模型"></p><h2 id="HTTP1-X和HTTP2-0"><a href="#HTTP1-X和HTTP2-0" class="headerlink" title="HTTP1.X和HTTP2.0"></a>HTTP1.X和HTTP2.0</h2><p>HTTP2.0和HTTP1.X相比的新特性：</p><ul><li><p><strong>多路复用</strong>：对于 HTTP/1.x，即使开启了长连接，请求的发送也是串行发送的，在带宽足够的情况下，对带宽的利用率不够，HTTP/2.0 采用了多路复用的方式，可以并行发送多个请求，提高对带宽的利用率。</p></li><li><p>数据流优先级：由于请求可以并发发送了，那么如果出现了浏览器在等待关键的 CSS 或者 JS 文件完成对页面的渲染时，服务器却在专注的发送图片资源的情况怎么办呢？HTTP/2.0 对数据流可以设置优先值，这个优先值决定了客户端和服务端处理不同的流采用不同的优先级策略。</p></li><li><p>服务端推送：在 HTTP/2.0 中，服务器可以向客户发送请求之外的内容，比如正在请求一个页面时，服务器会把页面相关的 logo，CSS 等文件直接推送到客户端，而不会等到请求来的时候再发送，因为服务器认为客户端会用到这些东西。这相当于在一个 HTML 文档内集合了所有的资源。</p></li><li><p>头部压缩：使用首部表来跟踪和存储之前发送的键值对，对于相同的内容，不会再每次请求和响应时发送。</p></li></ul><h2 id="HTTP请求的头部"><a href="#HTTP请求的头部" class="headerlink" title="HTTP请求的头部"></a>HTTP请求的头部</h2><p>:Method :GET<br>:scheme: https<br>accept: <em>/</em><br>accept-encoding: gzip, deflate, br<br>accept-language: zh-CN,zh;q=0.9<br>Authorization：<br>cache-control: no-cache<br>cookie: id=22f142b7d6c10020||t=1588946418|et=730|cs=002213fd48ea40db9072bfded2<br>origin: <a href="https://blog.csdn.net" target="_blank" rel="noopener">https://blog.csdn.net</a>   (host)<br>pragma: no-cache<br>referer: <a href="https://blog.csdn.net/YLBF_DEV/article/details/50266447" target="_blank" rel="noopener">https://blog.csdn.net/YLBF_DEV/article/details/50266447</a><br>user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36</p><h2 id="HTTP响应的头部"><a href="#HTTP响应的头部" class="headerlink" title="HTTP响应的头部"></a>HTTP响应的头部</h2><p>cache-control: no-cache, must-revalidate<br>content-encoding: br<br>content-length: 7815<br>content-type: text/plain; charset=UTF-8<br>date: Sat, 30 May 2020 15:00:13 GMT<br>set-cookie: id=22f142b7d6c10020||t=1588946418|et=730|cs=002213fd48ea40db9072bfded2; expires=Sun, 08-May-2022 14:00:18 GMT; path=/; domain=.doubleclick.net; Secure; SameSite=none<br>status: 200</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 和 Session 是为了在无状态的HTTP协议之上维护会话状态，使得服务器可以知道当前是和哪个客户在打交道。</p><h3 id="Cookie的属性"><a href="#Cookie的属性" class="headerlink" title="Cookie的属性"></a>Cookie的属性</h3><ul><li><p>name：　　字段为一个cookie的名称。</p></li><li><p>value：　　字段为一个cookie的值。</p></li><li><p><strong>domain：</strong>　　字段为可以访问此cookie的域名。</p></li><li><p><strong>path：</strong>   字段为可以访问此cookie的页面路径。 比如domain是abc.com,path是/test，那么只有/test路径下的页面可以读取此cookie。</p></li></ul><blockquote><p>发生跨域xhr请求时，即使请求URL的域名和路径都满足 cookie 的 Domain和Path，默认情况下cookie也不会自动被添加到请求头部中。</p></blockquote><ul><li><strong>expires/Max-Age：</strong> 　　字段为此cookie超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</li></ul><blockquote><p>Expires是 http/1.0协议中的选项，在http/1.1协议中Expires已经由 Max age 选项代替，两者的作用都是限制cookie 的有效时间。Expires的值是一个时间点（cookie失效时刻= Expires），而Max age的值是一个以秒为单位时间段（cookie失效时刻= 创建时刻+ Max age）。 另外， Max age的默认值是 -1(即有效期为 session )； Max age有三种可能值：负数、0、正数。负数：有效期session；0：删除cookie；正数：有效期为创建时刻+ Max age。</p></blockquote><ul><li><p>size：　　字段 此cookie大小。</p></li><li><p>secure：　　 字段 设置是否只能通过https来传递此条cookie</p></li><li><p><strong>httpOnly：</strong>   当cookie带httpOnly选项时，客户端则无法通过js代码去访问（包括读取、修改、删除等）这个cookie。</p></li></ul><h3 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a>Cookie与Session</h3><p>cookie是存在客户端浏览器上，session会话存在服务器上。</p><ul><li><p>因为Cookie是明文传输的， 只要服务器设置过一次authed=true|xxxx我不就知道true的签名是xxxx了么， 以后就可以用这个签名来欺骗服务器了。因此Cookie中最好不要放敏感数据。 一般来讲Cookie中只会放一个Session Id，而Session存储在服务器端。</p></li><li><p>Session 是存储在服务器端的，避免了在客户端Cookie中存储敏感数据。 Session 可以存储在HTTP服务器的内存中，也可以存在内存数据库（如redis）中， 对于重量级的应用甚至可以存储在数据库中。</p></li><li><p>用户登录产生的cookie存储到服务端，产生个session id（签名后） 返回给客户端</p></li><li><p>在HTTP协议之上，通过Cookie实现了持久的会话。这个会话便称为Session。</p></li></ul><h3 id="sessionStorage与localStorage"><a href="#sessionStorage与localStorage" class="headerlink" title="sessionStorage与localStorage"></a>sessionStorage与localStorage</h3><ol><li><p>sessionStorage用于本地存储一个会话中的数据，这些数据只有在同一个会话中的页面才能访问，并且当会话结束后，数据也随之销毁。所以sessionStorage仅仅是会话级别的存储，而不是一种持久化的本地存储。</p></li><li><p>localStorage是持久化的本地存储，除非是通过js删除，或者清除浏览器缓存，否则数据是永远不会过期的。</p></li></ol><h3 id="web-storage和cookie的区别"><a href="#web-storage和cookie的区别" class="headerlink" title="web storage和cookie的区别"></a>web storage和cookie的区别</h3><ol><li><p>web storages和cookie的作用不同，web storage是用于本地大容量存储数据(web storage的存储量大到5MB);而cookie是用于客户端和服务端间的信息传递。</p></li><li><p>web storage有setItem、getItem、removeItem、clear等方法，cookie需要我们自己来封装setCookie、getCookie、removeCookie。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日头条前端实习岗位面试准备（1）</title>
      <link href="/posts/a6833495.html/"/>
      <url>/posts/a6833495.html/</url>
      
        <content type="html"><![CDATA[<p>本篇文章主要记录下自己复杂的心路历程和只有五天的准备时间的面试前准备经历，第一次投简历，对面试流程都不熟悉，上网一查发慌的不得了。今日头条面试难度大，我现在所学的知识都太浅显，这是关键问题。准备都是无头绪的，搜了很多资料，决定在这里边学习，边记录，解决无头绪问题。</p><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><blockquote><p>考官好，我是刘重阳，出生于1999年的重阳节（为了让考官记住我），来自北京交通大学软件工程学院，现在大三，目前确定自己的发展方向是网站建设，喜欢开源，目标是打造一个属于自己的品牌。技术上，对主流框架vue和spring生态比较感兴趣，目前正在学习中。<br>我看网上的很多面经都说会问为什么学前端这个问题。<br>我喜欢交互。相比于后端，它更具体。</p></blockquote><h1 id="首先，静下心思考考官会侧重哪方面的问题"><a href="#首先，静下心思考考官会侧重哪方面的问题" class="headerlink" title="首先，静下心思考考官会侧重哪方面的问题"></a>首先，静下心思考考官会侧重哪方面的问题</h1><p>我面试的是前端实习岗位（听说会按校招的标准面试），任何岗位都需要看业务能力强、成熟稳重、积极向上的员工，所以前端应该主要会考察HTML、CSS、JS，虽然有点废话，但我心很乱这样一步步思考能有助于整理思绪。我的简历上写了熟悉vue我想面试官应该主要会考察vue的很多知识。想到了这两点，我决定开始从知识点入手行动起来。</p><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p>一套用于构建用户界面的<strong>渐进式</strong>框架，Vue 的核心库只关注视图层，易上手。</p><h3 id="vue的虚拟DOM"><a href="#vue的虚拟DOM" class="headerlink" title="vue的虚拟DOM"></a>vue的虚拟DOM</h3><ul><li><p>虚拟DOM的最终目标是将虚拟节点渲染到视图上。虚拟DOM在Vue.js主要做了两件事： - 提供与真实DOM节点所对应的虚拟节点vnode - 将虚拟节点vnode和旧虚拟节点oldVnode进行对比，然后更新视图。<br><img src="http://qiniu.1542051400.club/singlemy/blog/20200530141135.png" alt="vue的虚拟DOM"></p><h4 id="为何需要Virtual-DOM？"><a href="#为何需要Virtual-DOM？" class="headerlink" title="为何需要Virtual DOM？"></a>为何需要Virtual DOM？</h4></li><li><p>具备跨平台的优势<br>Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境</p></li><li><p>操作DOM慢，js运行效率高。<br>DOM操作的执行速度远不如Javascript的运算速度快，把大量的DOM操作搬运到Javascript中，运用patching算法来计算出真正需要更新的节点，最大限度地减少DOM操作，从而显著提高性能。</p></li><li><p>提升渲染性能</p></li></ul><h3 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h3><p><img src="http://qiniu.1542051400.club/singlemy/blog/20200530144747.png" alt="vue的生命周期"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS工具栏 移动/矩形选框 工具 ：Day2</title>
      <link href="/posts/3441d976.html/"/>
      <url>/posts/3441d976.html/</url>
      
        <content type="html"><![CDATA[<h1 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h1><h2 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h2><p> 透明的玻璃</p><h2 id="移动工具"><a href="#移动工具" class="headerlink" title="移动工具"></a>移动工具</h2><p><img src="http://qiniu.1542051400.club/singlemy/blog/20200529002635.png" alt="移动工具选项区"></p><ol><li>移动工具是移动选中的图层</li><li>图层分组移动</li><li>选项区自动选择：自动选择图层，不用每次移动先选择图层</li><li>自由变换 Ctrl + T</li><li>对齐与分布（选区和画布）</li></ol><h2 id="选区"><a href="#选区" class="headerlink" title="选区"></a>选区</h2><p> 对图像进行区域的选择</p><h2 id="矩形选框工具组"><a href="#矩形选框工具组" class="headerlink" title="矩形选框工具组"></a>矩形选框工具组</h2><p><img src="http://qiniu.1542051400.club/singlemy/blog/20200529184546.png" alt="矩形选框工具选项区"></p><h3 id="选择与取消"><a href="#选择与取消" class="headerlink" title="选择与取消"></a>选择与取消</h3><ul><li>Shift 选择正方形</li><li>Ctrl + D 取消选择</li></ul><h3 id="选择与移动"><a href="#选择与移动" class="headerlink" title="选择与移动"></a>选择与移动</h3><ul><li>图层锁住时移动是自动填充背景色</li><li>一般复制选区到单独图层 Ctrl + J</li><li>Shift + 选择 ：加选区</li><li>Alt + 选择 ：减选区</li><li>Shift + Alt + 选择 ：交叉选区</li></ul><h3 id="羽化"><a href="#羽化" class="headerlink" title="羽化"></a>羽化</h3><ul><li>把周边的像素虚化</li></ul><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><ul><li>固定比例与固定大小</li></ul><h3 id="变换选区与填充"><a href="#变换选区与填充" class="headerlink" title="变换选区与填充"></a>变换选区与填充</h3><p><img src="http://qiniu.1542051400.club/singlemy/blog/20200529191634.png" alt="选框区右击菜单"></p><ul><li>填充前景色 ： Alt + Delete</li><li>填充背景色 ： Ctrl + Delete</li></ul><h3 id="椭圆选框"><a href="#椭圆选框" class="headerlink" title="椭圆选框"></a>椭圆选框</h3><ul><li>Alt + 选择 ：从圆心开始四周发散选择</li><li>Shift + 选择 ： 画圆</li></ul><h3 id="单行单列选框"><a href="#单行单列选框" class="headerlink" title="单行单列选框"></a>单行单列选框</h3><ul><li>对于较细的线，可以选择图层，然后取消自动选择，就可以实现移动</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 自媒体运营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白如何进行PS自学：Day1</title>
      <link href="/posts/1d4dad75.html/"/>
      <url>/posts/1d4dad75.html/</url>
      
        <content type="html"><![CDATA[<h2 id="PS自学大纲"><a href="#PS自学大纲" class="headerlink" title="PS自学大纲"></a>PS自学大纲</h2><ol><li>PS是现在使用最广泛的平面设计工具</li><li>其实和这个问题比起来，更重要的问自己要用PS做什么？</li><li>下载安装软件后首先熟悉主面板的每个区</li><li>找一个素材网站，或者自己现有的图片，打开PS比划一二</li><li>初体验后，从创建画布开始，了解平面设计的基本知识</li><li>依次熟悉菜单栏、工具栏和面板区</li></ol><h2 id="图像的组成"><a href="#图像的组成" class="headerlink" title="图像的组成"></a>图像的组成</h2><ol><li>图像分为像素图和矢量图。</li></ol><ul><li>像素图：图像是由许多点组成的，当图像放大时会模糊</li><li>矢量图：由点确定的线组成，放大不会模糊。</li></ul><ol start="2"><li>图像的单位有像素、厘米、英寸等，常用的尺寸（可在新建画布时快捷选择）：</li></ol><blockquote><ul><li>1寸照片，尺寸大小是：2.5厘米×3.5厘米，分辨率设成300像素/英寸，这样最终得到的像素是：295×413</li></ul></blockquote><blockquote><ul><li>小2寸照片，尺寸大小是：3.3厘米×4.8厘米，分辨率设成300像素/英寸，得到的像素是：390×567</li></ul></blockquote><blockquote><ul><li>2寸照片，尺寸大小是：3.5厘米×5.3厘米，分辨率设成300像素/英寸，得到的像素是：413×626</li></ul><ol start="3"><li>所谓分辨率，就是像素点的密度，一般分辨率越高图像越清晰，也越大。</li><li>颜色模式分为RGB（红绿蓝）和CMYK（印刷色），印刷色在显示器上暗淡。</li></ol></blockquote><h2 id="图片的格式"><a href="#图片的格式" class="headerlink" title="图片的格式"></a>图片的格式</h2><p>常见的格式有JPG、PNG、GIF和PSD</p><ul><li>PSD：保留图层信息，是PS的原格式</li><li>JPG：保留真实性，进行有损压缩，图片较小</li><li>PNG：支持透明，图片清晰度较高。</li><li>GIF：支持帧的特点，可以做成动画</li></ul><blockquote><p>真实性、透明性、矢量性 1、  真实性中就是色彩度、位深、损耗(压缩)等；(jpg、jpeg、gif、tiff、bmp)2、  透明性就很明显了，就是支技透明的特性，但这里也有一个就是位深，他会影响透明度的深度png8与png24的差异就在这里；(png)3、  特殊动画，就是支持帧的特点，可以做成动画；(gif)4、  矢量性就可还原度，可再编辑的特性，通俗一点来讲就是很多人常说的放大不模糊的特点，因为他们的组成是由公式曲线方程生成的(但我们是可视化的编辑)(ai、cdr、eps)。转自<a href="https://www.zhihu.com/question/29758228" target="_blank" rel="noopener">知乎作者飞扬。</a></p></blockquote><h2 id="快捷键积累"><a href="#快捷键积累" class="headerlink" title="快捷键积累"></a>快捷键积累</h2><ul><li>Ctrl + N ：新建画布</li><li>Alt + 滚轮 ：放大缩小</li><li>Ctrl Shift （Alt）+ S ：保存图片（选择web格式） </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 自媒体运营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局中的display</title>
      <link href="/posts/657b68b.html/"/>
      <url>/posts/657b68b.html/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>HTML和CSS别混为一谈。</p><h2 id="预备知识梳理"><a href="#预备知识梳理" class="headerlink" title="预备知识梳理"></a>预备知识梳理</h2><ol><li>HTML的元素大体上被分为两类：块级元素和内联元素。块级元素在浏览器显示时，通常会以新行来开始（和结束），块元素是一个元素，占用了全部宽度，在前后都是换行符,比如最常见的<code>&lt;div&gt;</code>和<code>&lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt;</code>;内联元素最常见的是<code>&lt;span&gt;</code>除此之外还有<code>&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;</code>,内联元素在显示时通常不会以新行开始,内联元素只需要必要的宽度，不强制换行。</li><li>CSS样式的优先级：<br>内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</li></ol><ul><li>通用选择器（*）</li><li>元素(类型)选择器</li><li>类选择器</li><li>属性选择器</li><li>伪类</li><li>ID 选择器</li><li>内联样式</li><li>!important 规则例外</li></ul><h2 id="Display属性"><a href="#Display属性" class="headerlink" title="Display属性"></a>Display属性</h2><h3 id="把块级元素转变成内联元素"><a href="#把块级元素转变成内联元素" class="headerlink" title="把块级元素转变成内联元素"></a>把块级元素转变成内联元素</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="把内联元素转变成块级元素"><a href="#把内联元素转变成块级元素" class="headerlink" title="把内联元素转变成块级元素"></a>把内联元素转变成块级元素</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p><code>display:inline-block</code>– 显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性,我们常将<code>&lt;ul&gt;</code>元素加上display:inline-block样式，原本垂直的列表就可以水平显示了。</p></li><li><p><code>display:none</code></p></li></ul><blockquote><p>visibility: hidden 相当于 display:none，能把元素隐藏起来，但两者的区别在于：</p></blockquote><ol><li>display:none 元素不再占用空间。</li><li>visibility: hidden 使元素在网页上不可见，但仍占用空间。</li></ol><h3 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设为Flex布局以后，子元素的<strong>float</strong>、clear和<strong>vertical-align</strong>属性将失效。</p><ol><li>flex-direction <strong>容器内</strong>元素的排列方向(默认横向排列)</li></ol><ul><li><code>flex-direction:row;</code> 沿水平主轴让元素从左向右排列</li><li><code>flex-direction:column;</code> 让元素沿垂直主轴从上到下垂直排列</li></ul><ol start="2"><li>justify-content 元素在主轴（页面）上的排列</li></ol><ul><li><code>justify-content:center;</code>元素在主轴（页面）上居中排列</li><li><code>justify-content:flex-start;</code>元素在主轴（页面）上由左或者上开始排列</li><li><code>justify-content:flex-end;</code>元素在主轴（页面）上由右或者下开始排列</li><li><code>justify-content:space-between;</code>元素在主轴（页面）上左右两端或者上下两端开始排列</li><li><code>justify-content:space-around;</code>每个元素两侧的间隔相等。所以，元素之间的间隔比元素与边框的间隔大一倍。</li></ul><ol start="3"><li>align-items 元素在主轴（页面）<strong>当前行</strong>的侧轴（纵轴）方向上的对齐方式，即在当前行上是（靠上对齐）（靠下对齐）（居中对齐）等</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token property">align-items</span><span class="token punctuation">:</span> stretch|center|flex-start|flex-end|baseline|initial|inherit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>其中stretch是默认值，拉伸填满整行。</p></blockquote><ol start="4"><li>align-content 在弹性容器内的元素没有占用交叉轴上所有可用的空间时对齐容器内的各项（垂直），就是弹性布局垂直方向上的排列方式</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token property">align-content</span><span class="token punctuation">:</span> stretch|center|flex-start|flex-end|space-between|space-around|initial|inherit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：Internet Explorer, Firefox, 和 Safari 浏览器不支持 align-content 属性。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的给C盘减压小技巧(1)</title>
      <link href="/posts/eb099757.html/"/>
      <url>/posts/eb099757.html/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p> 电脑的使用是必备的技能，C盘也就是系统盘总是用着用着就满了，原因归结于四个字：系统默认。和它对应的是：用户自定义。<br>接下来分享几个常用的自定义设置。</p><h1 id="QQ微信的文件存储路径自定义"><a href="#QQ微信的文件存储路径自定义" class="headerlink" title="QQ微信的文件存储路径自定义"></a>QQ微信的文件存储路径自定义</h1><ul><li>Tim</li></ul><ol><li>找到软件的主菜单，点击打开设置选项。<br><img src="http://qiniu.1542051400.club/tim1.png" alt="Tim示意图"></li><li>点击文件管理，找到“默认把接受到的文件保存到此文件夹”选项，点击更改目录结构，选择C盘以外的文件夹存储即可。<br><img src="http://qiniu.1542051400.club/tim2.png" alt="设置面板"></li><li>如果想改变聊天消息的存储，向下找到“消息记录等数据的保存位置”，选择自定义，同样选择一个自定义文件夹即可。<br><img src="http://qiniu.1542051400.club/tim3.png" alt="设置面板"><br>我这里设置路径分别是：E:\software-save\Tencent Files\QQ\Rece<br>和E:\software-save\Tencent Files\QQ\ChatRecord，可做参考自定义。如果设置后提示需要重启转移存储文件，同意即可。</li><li>如果是QQ的正常版，它的主菜单在左下角，设置方法相同。<br><img src="http://qiniu.1542051400.club/tim4.png" alt="QQ主菜单位置"><h1 id="更改win10系统的默认安装路径"><a href="#更改win10系统的默认安装路径" class="headerlink" title="更改win10系统的默认安装路径"></a>更改win10系统的默认安装路径</h1>参考百度教程：<a href="https://jingyan.baidu.com/article/676629977e1dbb54d51b8414.html" target="_blank" rel="noopener">更改win10系统的默认安装路径</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>projectScropeManagment</title>
      <link href="/posts/ef2e3874.html/"/>
      <url>/posts/ef2e3874.html/</url>
      
        <content type="html"><![CDATA[<h1 id="项目范围管理"><a href="#项目范围管理" class="headerlink" title="项目范围管理"></a>项目范围管理</h1><p>为达成产品范围所实施的所有活动。产品范围变化项目范围一定变化，反之不然。</p><h2 id="一、-收集需求（Collect-Requirement）"><a href="#一、-收集需求（Collect-Requirement）" class="headerlink" title="一、 收集需求（Collect Requirement）"></a>一、 收集需求（Collect Requirement）</h2><ol><li>技术需求</li><li>项目管理需求</li></ol><a id="more"></a><ul><li>挖掘客户需求：客户提出的不一定是真的需求</li><li>产品需求和商业需求</li></ul><ol start="3"><li><p>输入：</p></li><li><p>收集需求的方法：</p></li></ol><blockquote><p>4.1 Group Creativity Techniques</p></blockquote><ul><li><p>头脑风暴</p><p>特点：面对面的，快（优点），结果不客观（缺点）。<br>具体表现：一言旁；考虑不成熟。</p></li></ul><ul><li><p>Delphi（专家判断）</p><p>特点：背对背，客观（优点），慢（缺点）。</p></li><li><p>质量功能部署 QSD：</p><p>识别客户满意的关键要素。产生措施。实施措施。</p></li><li><p>思维导图</p></li><li><p>姻亲图：分类</p></li><li><p>Multicriteria decision analysis</p><blockquote><p>4.2 Group Decision Making Techniques</p></blockquote></li><li><p>需求分析跟踪矩阵：</p><ul><li>需求描述</li><li>商业需求、机遇、产品目标、目的</li><li>项目目的</li><li>产出物</li><li>产品设计</li><li>产品生产，研发</li><li>测试结果</li></ul></li></ul><h2 id="二、-定义范围（Define-Scope）"><a href="#二、-定义范围（Define-Scope）" class="headerlink" title="二、 定义范围（Define Scope）"></a>二、 定义范围（Define Scope）</h2><ol><li>Expert judgement（专家判断）</li><li>Product analysis</li></ol><ul><li>价值分析：识别功能，确定价值，实现功能。</li></ul><h3 id="项目范围说明书："><a href="#项目范围说明书：" class="headerlink" title="项目范围说明书："></a>项目范围说明书：</h3><ul><li>项目范围描述：比 project charter 更详细</li><li>用户接受标准</li><li>可交付性：</li><li>项目边界：什么不是我应该提交的，什么是应该提交的。</li><li>限制条件：针对范围的。</li><li>假设条件：</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC02</title>
      <link href="/posts/88534fa4.html/"/>
      <url>/posts/88534fa4.html/</url>
      
        <content type="html"><![CDATA[<h1 id="分析-Spring-webmvc-的启动流程"><a href="#分析-Spring-webmvc-的启动流程" class="headerlink" title="分析 Spring webmvc 的启动流程"></a>分析 Spring webmvc 的启动流程</h1><blockquote><p>Spring MVC 是 Spring 家族中比较有特点的一员，它分离了控制器、模型对象和视图层。Spring 的 MVC 框架是围绕 DispatcherServlet 设计的，主要由 DispatcherServlet、处理器映射、控制器、视图解析器、视图组成，Spring webmvc 启动以 web.xml 为入口，进行 web 初始化，再进行 Spring MVC 初始化。</p></blockquote><a id="more"></a><h2 id="一、-web-初始化"><a href="#一、-web-初始化" class="headerlink" title="一、 web 初始化"></a>一、 web 初始化</h2><h3 id="1-1-从-xml-文件分析"><a href="#1-1-从-xml-文件分析" class="headerlink" title="1.1 从 xml 文件分析"></a>1.1 从 xml 文件分析</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册监听器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--第一次初始化的内容--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/WEB-INF/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.过滤器，非必须，但过滤器监听器正常初始化--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>      org.springframework.web.filter.CharacterEncodingFilter    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--3. 初始化（注册）Servlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Instantiate an instance of each event listener identified by a <listener> element in the deployment descriptor.</listener></li><li>For instantiated listener instances that <em>implement</em> ServletContextListener, call the contextInitialized() method.</li><li>Instantiate an instance of each filter identified by a <filter> element in the deployment descriptor and call each filter instance’s init() method.</filter></li><li>Instantiate an instance of each servlet identified by a <servlet> element that includes a <load-on-startup> element in the order defined by the load-on-startup element values, and call each servlet instance’s init() method.</load-on-startup></servlet></li></ol><ul><li>上面是官网给出的 web 的<strong>初始化</strong>过程，首先注册<strong>根监听器</strong>，接着完成第一次初始化,即注册 applicationContext，并启动 Servlet<strong>监听器</strong>；然后初始化（注册）<strong>过滤器</strong>；再初始化（注册）<strong>Servlet</strong>。其中比较重要的是 ApplicationContext 注册和 Servlet 注册。</li><li>ContextLoaderListener 类起着至关重要的作用。它读取 web.xml 中配置的 context-param 中的配置文件，提前在 web 容器初始化前准备业务对应的 Application context;<strong>将创建好的 Application context 放置于 ServletContext 中</strong>，为<strong>springMVC</strong>部分的初始化做好准备。</li><li>所以三个 xml 的加载顺序是 web.xml 创建 WebApplicationContext；<br>ApplicationContext.xml 加载 bean；至此 web 就已经加载完了，然后是 DispatchServlet.xml，它会把前两个加载的东西拿来做参数，来初始化 DispatchServlet 管控 Spring MVC 部分。</li></ul><h3 id="1-2-从类的关系理解"><a href="#1-2-从类的关系理解" class="headerlink" title="1.2 从类的关系理解"></a>1.2 从类的关系理解</h3><ul><li>最初始的类是 ContextLoader，实现了下面两个个方法：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">////创建父容器context，默认是XmlWebApplicationContext</span><span class="token keyword">public</span> WebApplicationContext <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">protected</span> WebApplicationContext <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>ServletContext sc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ContextLoaderListener 类,继承了 ContextLoader。实现了 ServletContextListener。</li></ul><h3 id="2-IoC-容器创建"><a href="#2-IoC-容器创建" class="headerlink" title="2. IoC 容器创建"></a>2. IoC 容器创建</h3><p>ApplicationContext 注册就是 IOC 容器的创建，实例化整个上下文中的 bean，所以 ApplicationContext.xml 是这样的：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于控制反转的概念，已经在上一篇博文中详细讲述，这里不再赘述，介绍几种创建 IoC 容器的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**通过xml文件注册的bean的IoC创建*/</span><span class="token comment" spellcheck="true">//classpath</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件路径</span>ApplicationContext getApplicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"配置文件的绝对路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**通过注解注册的bean的IoC容器创建*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Bean-初始化"><a href="#3-Bean-初始化" class="headerlink" title="3. Bean 初始化"></a>3. Bean 初始化</h3><h4 id="3-1-bean-的概念"><a href="#3-1-bean-的概念" class="headerlink" title="3.1 bean 的概念"></a>3.1 bean 的概念</h4><blockquote><p>在 Spring 中，由 Spring IoC 容器管理的对象叫做 beans。 bean 就是由 Spring IoC 容器实例化、组装和以其他方式管理的对象。此外 bean 只是你应用中许多对象中的一个。Spring 框架中，一旦把一个 Bean 纳入到 Spring IoC 容器之中，这个 Bean 的生命周期就会交由容器进行管理。</p></blockquote><h4 id="3-2-bean-的属性"><a href="#3-2-bean-的属性" class="headerlink" title="3.2 bean 的属性"></a>3.2 bean 的属性</h4><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">这个属性是强制性的，并且指定用来创建 bean 的 bean 类。</td></tr><tr><td align="left">name</td><td align="left">这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，至少定义一个 ID 或 name 属性来指定 bean 标识符。</td></tr><tr><td align="left">scope</td><td align="left">这个属性指定由特定的 bean 定义创建的对象的作用域</td></tr><tr><td align="left">constructor-arg</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">properties</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">autowiring mode</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">lazy-initialization mode</td><td align="left">延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。</td></tr><tr><td align="left">initialization 方法</td><td align="left">在 bean 的所有必需的属性被容器设置之后，调用回调方法。</td></tr><tr><td align="left">destruction 方法</td><td align="left">当包含该 bean 的容器被销毁时，使用回调方法。</td></tr></tbody></table><h4 id="3-3-bean-作用域"><a href="#3-3-bean-作用域" class="headerlink" title="3.3 bean 作用域"></a>3.3 bean 作用域</h4><ul><li>singleton 作用域：默认的作用域。如果你想让 Spring 在每次需要时都返回同一个 bean 实例，你应该声明 bean 的作用域的属性为 singleton。</li><li>prototype 作用域：为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 prototype。</li></ul><h4 id="3-4-生命周期"><a href="#3-4-生命周期" class="headerlink" title="3.4 生命周期"></a>3.4 生命周期</h4><ul><li>实例化：实例化一个 Bean（由 BeanFactory 读取 Bean 定义文件，并生成各个实例）－－也就是我们常说的 new（@Bean）；</li><li>设置属性：按照 Spring 上下文对实例化的 Bean 的属性值进行设置。</li><li>使用初始化：调用 bean 的初始化方法。(将 bean 实例传递给 bean 后置处理器的 postProcessBeforeInitialization()方法)</li><li>bean 可以使用了……</li><li>当容器关闭时，调用 bean 的销毁方法<blockquote><p>在配置 bean 时，通过 init-method 和 destroy-method 属性为 bean 指定初始化和销毁方法.</p></blockquote></li></ul><h4 id="bean-注入的方式"><a href="#bean-注入的方式" class="headerlink" title="bean 注入的方式"></a>bean 注入的方式</h4><ol><li>通过 xml 注入：</li></ol><ul><li>定义 bean</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String sno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 ApplicationContext.xml 中注册</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Bean.Student<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>通过注解注入：</li></ol><ul><li>首先在 spring 配置文件中开启注解扫描：</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.example.spring.mvc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用注解声明 bean:</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentHomeWorkJdbc</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>基于 java 类的配置</li></ol><ul><li>使用@Configuration 注解需要作为配置的类，表示该类将定义 Bean 的元数据</li><li>使用@Bean 注解相应的方法，该方法名默认就是 Bean 的名称，该方法返回值就是 Bean 的对象。</li><li>AnnotationConfigApplicationContext 或子类进行加载基于 java 类的配置</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MyService <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、-Spring-MVC-启动流程"><a href="#二、-Spring-MVC-启动流程" class="headerlink" title="二、 Spring MVC 启动流程"></a>二、 Spring MVC 启动流程</h2><h3 id="2-1-分析-DispatcherServlet-xml"><a href="#2-1-分析-DispatcherServlet-xml" class="headerlink" title="2.1 分析 DispatcherServlet.xml"></a>2.1 分析 DispatcherServlet.xml</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--此文件负责整个mvc中的配置--></span>    <span class="token comment" spellcheck="true">&lt;!--启用spring的一些annotation --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置注解驱动 可以将request参数与绑定到controller参数上 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--静态资源映射--></span>    <span class="token comment" spellcheck="true">&lt;!--本项目把静态资源放在了webapp目录下，资源映射如下--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/css/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/css/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/fonts/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/fonts/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/img/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/img/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/js/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP--></span>    <span class="token comment" spellcheck="true">&lt;!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--设置JSP文件的目录位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exposeContextBeansAsAttributes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--自动扫描装配 （base-package由包名决定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-图解"><a href="#2-2-图解" class="headerlink" title="2.2 图解"></a>2.2 图解</h3><ol><li>客户端请求提交到 DispatcherServlet。</li><li>由 DispatcherServlet 控制器寻找一个或多个 HandlerMapping，找到处理请求的 Controller。</li><li>DispatcherServlet 将请求提交到 Controller。</li><li>Controller 调用业务逻辑处理后返回 ModelAndView。</li><li>DispatcherServlet 寻找一个或多个 ViewResolver 视图解析器，找到 ModelAndView 指定的视图。</li><li>视图负责将结果显示到客户端。<blockquote><p>共包含 4 个 Spring MVC 接口，即 DispatcherServlet、HandlerMapping、Controller 和 ViewResolver。</p></blockquote></li></ol><ul><li><p>Spring MVC 所有的请求都经过 DispatcherServlet 来统一分发，在 DispatcherServlet 将请求分发给 Controller 之前需要借助 Spring MVC 提供的 HandlerMapping 定位到具体的 Controller。</p></li><li><p>HandlerMapping 接口负责完成客户请求到 Controller 映射。</p></li><li><p>Controller 接口将处理用户请求，这和 Java Servlet 扮演的角色是一致的。一旦 Controller 处理完用户请求，将返回 ModelAndView 对象给 DispatcherServlet 前端控制器，ModelAndView 中包含了模型（Model）和视图（View）。</p></li><li><p>从宏观角度考虑，DispatcherServlet 是整个 Web 应用的控制器；从微观考虑，Controller 是单个 Http 请求处理过程中的控制器，而 ModelAndView 是 Http 请求过程中返回的模型（Model）和视图（View）。</p></li><li><p>ViewResolver 接口（视图解析器）在 Web 应用中负责查找 View 对象，从而将相应结果渲染给客户。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能基础</title>
      <link href="/posts/a1bded03.html/"/>
      <url>/posts/a1bded03.html/</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能基础知识总结"><a href="#人工智能基础知识总结" class="headerlink" title="人工智能基础知识总结"></a>人工智能基础知识总结</h1><h2 id="概念及其发展历史（一）"><a href="#概念及其发展历史（一）" class="headerlink" title="概念及其发展历史（一）"></a>概念及其发展历史（一）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>机器或软件所展现的智能</li><li>学术研究领域的名称</li><li>如何创建计算机和计算机软件使之具有智能行为</li></ul><!--less--><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><h4 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h4><ul><li>标志：<br>1956 年的“达特茅斯夏季人工智能研究计划”会议。</li><li>相关事件：<br>图灵测试——旨在提供一种令人满意的关于智能的可操作定义<br>视觉图灵测试——是受人类理解图像能力的启发而提出的，是采用一个操作员辅助设备、根据给定的图像产生随机的二元问题序列。<br>中文屋——试图揭示计算机绝不能描述为有“智力”或“知性”，不管它多么智能。结论：图灵测试的结论是不充分的。</li><li>人物：<br>AI 之父：Marvin Lee Minsky,John MacCarthy,Herbert ASimon,Allen Newell</li></ul><h4 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h4><ul><li>1950–1956 The Birth of AI AI 的诞生</li><li>1956–1974 The Golden Years 黄金之年</li><li>1974–1980 The First AI Winter 第一个 AI 之冬</li><li>1980–1987 The Boom of AI AI 的繁荣期</li><li>1987–1993 The Second AI Winter 第二个 AI 之冬</li><li>1993–Present The Breakthrough 突破</li></ul><h4 id="研究领域"><a href="#研究领域" class="headerlink" title="研究领域"></a>研究领域</h4><ul><li>知识表示</li><li>机械感知</li><li>机械思维</li><li>机械学习</li><li>机械行为</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>弱人工智能：它是无意识的 AI，专注于一个具体的任务。</li><li>强人工智能：意味着机器具有将智能用于处理任何问题的能力。它是人工智能研究的主要目标。</li><li>超人工智能：是一个假定的智能体，拥有远远超过聪明和最有天赋的人类大脑的智能。</li></ul><h4 id="基础学科"><a href="#基础学科" class="headerlink" title="基础学科"></a>基础学科</h4><ul><li>哲学</li><li>数学</li><li>经济学</li><li>神经科学</li><li>心理学</li><li>计算机工程</li><li>控制理论和控制论</li><li>语言学</li></ul><h4 id="典型问题"><a href="#典型问题" class="headerlink" title="典型问题"></a>典型问题</h4><ul><li>计算机视觉</li><li>图像处理</li><li>VR, AR 和 MR</li><li>模式识别</li><li>智能诊断</li><li>博弈论和策略规划</li><li>AI 游戏和游戏机器人</li><li>机器翻译</li><li>自然语言处理和聊天机器人</li><li>非线性控制和机器人技术</li><li>智能生活</li><li>自动推理</li><li>自动化</li><li>生物计算</li><li>概念计算</li><li>数据挖掘</li><li>知识表示</li><li>语义 Web</li><li>垃圾邮件过滤</li><li>诉讼</li><li>机器人学</li><li>混合人工智能</li><li>智能代理</li><li>智能控制</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一年后再拿起VScode(1)</title>
      <link href="/posts/312e9705.html/"/>
      <url>/posts/312e9705.html/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode的代码美化–vue项目"><a href="#VScode的代码美化–vue项目" class="headerlink" title="VScode的代码美化–vue项目"></a>VScode的代码美化–vue项目</h1><p>插件：eslint+vetur+prettier</p><a id="more"></a><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p><font face="楷体" color="">一年前跟学长尝试了一个vue项目，第一次接触编辑器，以前学的C语言和Java原来编译他们那个叫IDE，是集成了编辑器和编译器的，用过ＶS studio，所以第一次拿起vscode就感觉设计哲学很符合自己的心意，但是接下来就让自己脑袋疼起来了，问题就是代码格式化。</font></p><h2 id="全局setting-json"><a href="#全局setting-json" class="headerlink" title="全局setting.json"></a>全局setting.json</h2><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   //字符大小，可自己调整  <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>  //设置tab的站位  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  //在保存时自动格式化代码  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"source.fixAll"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  // 全局使用保存自动格式化功能，vue项目关闭此项!!!!!!!  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // 使用单引号包含字符串   <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // 不添加行尾分号  <span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  //配置终端为cmd便于使用其他命令，如hexo  <span class="token property">"terminal.integrated.shell.windows"</span><span class="token operator">:</span> <span class="token string">"C:\\WINDOWS\\System32\\cmd.exe"</span><span class="token punctuation">,</span>  <span class="token property">"git.enableSmartCommit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，网上搜了很多教程，但大多数都存在的问题就是，他们的设置不是针对vue项目，而eslint、vetur、prettier这些组件的美化格式是冲突的，所以针对不同的项目要在工作区的setting.json进行不同的配置，来处理他们的冲突。</p><h2 id="工作区的setting-json"><a href="#工作区的setting-json" class="headerlink" title="工作区的setting.json"></a>工作区的setting.json</h2><pre class="line-numbers language-json"><code class="language-json">  /* 关闭编辑器自带保存格式化功能，此功能会用Vetur进行格式化。*/  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这一点很重要。vetur可以用来识别.vue文件但是他的格式和eslint的格式不一样，默认vscode使用vetur的格式，而如果项目中引入了eslint依赖，并且setting.json中设置了eslint对html、css、js、vue的格式化，这样针对js文件就有了两种格式化，保存时总是报错（令我一度放弃过eslint）。</p><ul><li><strong>以上的设置是最基本的一些，也是最必要的。当然还有很对配置选项，都可以上官网或者一些（带注释的）教程上找</strong></li></ul><h2 id="eslintrc文件"><a href="#eslintrc文件" class="headerlink" title=".eslintrc文件"></a>.eslintrc文件</h2><p>eslint插件用于根据工程目录的.eslintrc.js配置文件在编辑器中显示一些错误提示，后面的自动格式化根据这里的错误提示进行格式化操作。前提是项目安装了eslint依赖。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    node<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//这里对eslint和prettier的矛盾做了调整，可查看prettier官网</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span> <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span> <span class="token string">"@vue/prettier"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">"babel-eslint"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"no-console"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"warn"</span> <span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"no-debugger"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"warn"</span> <span class="token punctuation">:</span> <span class="token string">"off"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在.eslintrc.js可以看到总体的eslint规则合并了vue、eslint和prettier的一些插件库进行语法分析(eslint针对js和vue，prettier针对js、html和css,这里eslint和prettier的一些冲突已经处理)<br>eslint很强大，关于其他配置官方给出了文档，vue官方也给出了<a href="https://github.com/vuejs/eslint-config-vue" target="_blank" rel="noopener">标配</a>。<br>下面我列出某个团队自己的规范,相信能看懂，哈哈：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">'babel-eslint'</span><span class="token punctuation">,</span>    sourceType<span class="token punctuation">:</span> <span class="token string">'module'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    node<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es6<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:vue/recommended'</span><span class="token punctuation">,</span> <span class="token string">'eslint:recommended'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add your custom rules here</span>  <span class="token comment" spellcheck="true">//it is base on https://github.com/vuejs/eslint-config-vue</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"vue/max-attributes-per-line"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">"singleline"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      <span class="token string">"multiline"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"max"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"allowFirstLine"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"vue/singleline-html-element-content-newline"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"vue/multiline-html-element-content-newline"</span><span class="token punctuation">:</span><span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"vue/name-property-casing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"PascalCase"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"vue/no-v-html"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">'accessor-pairs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'arrow-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'block-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'brace-style'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1tbs'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'allowSingleLine'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'camelcase'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'properties'</span><span class="token punctuation">:</span> <span class="token string">'always'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-dangle'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-style'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'last'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'constructor-super'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'curly'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'multi-line'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'dot-location'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'property'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'eol-last'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'eqeqeq'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"null"</span><span class="token punctuation">:</span> <span class="token string">"ignore"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'generator-star-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'handle-callback-err'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'^(err|error)$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'indent'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'SwitchCase'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'jsx-quotes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'prefer-single'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'key-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'beforeColon'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'afterColon'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'keyword-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'new-cap'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'newIsCap'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'capIsNew'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'new-parens'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-array-constructor'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-caller'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-console'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'no-class-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-cond-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-const-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-control-regex'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'no-delete-var'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-args'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-class-members'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-keys'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-duplicate-case'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-empty-character-class'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-empty-pattern'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-eval'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-ex-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extend-native'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-bind'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-boolean-cast'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-parens'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'functions'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-fallthrough'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-floating-decimal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-func-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-implied-eval'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-inner-declarations'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'functions'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-invalid-regexp'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-irregular-whitespace'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-iterator'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-label-var'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-labels'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'allowLoop'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'allowSwitch'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-lone-blocks'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-mixed-spaces-and-tabs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multi-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multi-str'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multiple-empty-lines'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-native-reassign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-negated-in-lhs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-object'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-require'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-symbol'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-wrappers'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-obj-calls'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-octal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-octal-escape'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-path-concat'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-proto'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-redeclare'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-regex-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-return-assign'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'except-parens'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-self-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-self-compare'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-sequences'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-shadow-restricted-names'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-spaced-func'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-sparse-arrays'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-this-before-super'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-throw-literal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-trailing-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-undef'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-undef-init'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unexpected-multiline'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unmodified-loop-condition'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unneeded-ternary'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'defaultAssignment'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-unreachable'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unsafe-finally'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unused-vars'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'vars'</span><span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>      <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token string">'none'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-call'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-computed-key'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-constructor'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-escape'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'no-whitespace-before-property'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-with'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'one-var'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'initialized'</span><span class="token punctuation">:</span> <span class="token string">'never'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'operator-linebreak'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'overrides'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'before'</span><span class="token punctuation">,</span>        <span class="token string">':'</span><span class="token punctuation">:</span> <span class="token string">'before'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'padded-blocks'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'quotes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'single'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'avoidEscape'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'allowTemplateLiterals'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'semi'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'semi-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-before-blocks'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-before-function-paren'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-in-parens'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-infix-ops'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'space-unary-ops'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'words'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'nonwords'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'spaced-comment'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'markers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'globals'</span><span class="token punctuation">,</span> <span class="token string">'eslint'</span><span class="token punctuation">,</span> <span class="token string">'eslint-disable'</span><span class="token punctuation">,</span> <span class="token string">'*package'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'template-curly-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'use-isnan'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'valid-typeof'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'wrap-iife'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'any'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'yield-star-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'both'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'yoda'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'prefer-const'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-debugger'</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'object-curly-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      objectsInObjects<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'array-bracket-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prettierrc文件"><a href="#prettierrc文件" class="headerlink" title=".prettierrc文件"></a>.prettierrc文件</h2><p>在文件根目录下创建.prettierrc对prettier格式化进行自定义规则设置：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  /* 使用单引号包含字符串 */  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /* 不添加行尾分号 */  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  /* 在对象属性添加空格 */  <span class="token property">"bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /* 优化html闭合标签不换行的问题 */  <span class="token property">"htmlWhitespaceSensitivity"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是我的最基本的配置，如有更多关于vscode美化代码的建议，欢迎评论。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>project charter</title>
      <link href="/posts/b0e6f2fc.html/"/>
      <url>/posts/b0e6f2fc.html/</url>
      
        <content type="html"><![CDATA[<h1 id="软件项目任务书内容"><a href="#软件项目任务书内容" class="headerlink" title="软件项目任务书内容"></a>软件项目任务书内容</h1><ol><li>组织方授权项目经理去做事</li></ol><a id="more"></a><ol start="2"><li>项目背景信息</li><li>项目经理职责</li><li>项目预算<br>企业项目经验</li><li>风险管理<br>适当的考虑风险<br>比如：三峡项目，考虑到是否会影响环境，具体分析不在是这个阶段给出</li><li>应用场景介绍</li><li>项目周期</li><li>项目约束和限制条件</li><li>项目目标<br>什么是项目范围，什么是产品范围？<br>什么样算是成功：项目预算（budget），时间期限，质量目标。</li><li>项目边界</li></ol><h1 id="项目章程存在的意义"><a href="#项目章程存在的意义" class="headerlink" title="项目章程存在的意义"></a>项目章程存在的意义</h1><ul><li>责权<br>PMI标准<br>.</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次用Git必看</title>
      <link href="/posts/ff30c72a.html/"/>
      <url>/posts/ff30c72a.html/</url>
      
        <content type="html"><![CDATA[<h1 id="git-使用细则"><a href="#git-使用细则" class="headerlink" title="git 使用细则"></a>git 使用细则</h1><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><blockquote><p><a href="https://git-scm.com/" target="_blank" rel="noopener">官网下载地址</a>git， 安装目录尽量不要选在系统盘，更改环境变量 HOME 的的值，可以更改 git bash 的默认工作区，即“~”的位置。在 HOME 值对应的目录下，.gitconfig 文件是 git 的全局配置文件。</p></blockquote> <a id="more"></a><h2 id="git-账户配置"><a href="#git-账户配置" class="headerlink" title="git 账户配置"></a>git 账户配置</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name  <span class="token string">"username"</span>  <span class="token comment" spellcheck="true">#--global全局配置，用户级别</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="git-远程仓库使用"><a href="#git-远程仓库使用" class="headerlink" title="git 远程仓库使用"></a>git 远程仓库使用</h2><ul><li>git 常用的远程仓库有<a href="https://github.com/" target="_blank" rel="noopener">github</a>,<a href="https://gitee.com/" target="_blank" rel="noopener">gitee</a>,<a href="https://about.gitlab.com/" target="_blank" rel="noopener">gitlab</a>等</li><li>git 采用 ssh 协议传输，生成传输公钥：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来系统提示命名文件名，并输入密码</p><pre class="line-numbers language-bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/e/Git/.ssh/id_rsa<span class="token punctuation">)</span>: a <span class="token comment" spellcheck="true">#&lt;filename>默认 id_rsa</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:<span class="token comment" spellcheck="true">#&lt;password> 一般两次Enter即可</span>Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> a.Your public key has been saved <span class="token keyword">in</span> a.pub.The key fingerprint is:<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生成的公钥是在.ssh 文件夹下的 xx.pub 文件，在 git 远程仓库账户下添加公钥。</li></ul><h3 id="远程仓库项目本地更改"><a href="#远程仓库项目本地更改" class="headerlink" title="远程仓库项目本地更改"></a>远程仓库项目本地更改</h3><h4 id="从远程仓库-clone"><a href="#从远程仓库-clone" class="headerlink" title="从远程仓库 clone"></a>从远程仓库 clone</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span>  <span class="token comment" spellcheck="true"># 结尾是.git</span><span class="token function">cd</span> 仓库名<span class="token function">git</span> config --local -l  <span class="token comment" spellcheck="true">#check the config information of local</span>或者 <span class="token function">git</span> remote -v     <span class="token comment" spellcheck="true">#查看远程仓库地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般是 clone 的远程仓库地址，.git 文件夹存在证明是 git 本地仓库。<br>.gitignore 文件是配置 git 上传时忽略哪些文件。</li></ul><h4 id="push-到远程仓库"><a href="#push-到远程仓库" class="headerlink" title="push 到远程仓库"></a>push 到远程仓库</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add * 或 <span class="token function">git</span> add <span class="token operator">&lt;</span>filename<span class="token operator">></span> <span class="token comment" spellcheck="true">#添加到本地仓库暂存区（Staging area）</span><span class="token function">git</span> commit -m <span class="token string">"做了哪些更改"</span>     <span class="token comment" spellcheck="true">#提交到本地仓库版本库</span><span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span><span class="token comment" spellcheck="true">#要push的目标远程仓库地址</span><span class="token function">git</span> status                     <span class="token comment" spellcheck="true">#查看git工作区（ working tree）状态</span><span class="token function">git</span> push -u origin master <span class="token comment" spellcheck="true"># 将工作区的master分支推送到远程仓库master分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>-u 参数：远程仓库没有该分支即创建，并且把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。</li></ul><h3 id="本地新项目上传到远程仓库"><a href="#本地新项目上传到远程仓库" class="headerlink" title="本地新项目上传到远程仓库"></a>本地新项目上传到远程仓库</h3><ul><li>在项目根目录 git bash here</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init  <span class="token comment" spellcheck="true">#初始化git版本库，生成.git文件夹</span><span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span><span class="token function">git</span> add *<span class="token function">git</span> commit -m <span class="token string">"做了哪些更改"</span><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="错误一：远程仓库已经更改"><a href="#错误一：远程仓库已经更改" class="headerlink" title="错误一：远程仓库已经更改"></a>错误一：远程仓库已经更改</h5>如果此时报错如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        master -<span class="token operator">></span> master <span class="token punctuation">(</span>fetch first<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'https://github.com/SingleMY/MoYang.git'</span>hint: Updates were rejected because the remote contains work that you <span class="token keyword">do</span>hint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: <span class="token punctuation">(</span>e.g., <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明远程仓库和本地版本库比对后，有的文件只在远程仓库有，本地版本库中没有，此时需要 pull 远程仓库文件到本地版本库：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/master  master     <span class="token comment" spellcheck="true">#把远程分支与本地分支关联</span><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><h5 id="错误二：未关联分支"><a href="#错误二：未关联分支" class="headerlink" title="错误二：未关联分支"></a>错误二：未关联分支</h5>如果不关联分支会报错：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">There is no tracking information <span class="token keyword">for</span> the current branch.Please specify <span class="token function">which</span> branch you want to merge with.See git-pull<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token keyword">for</span> details.    <span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span>If you wish to <span class="token keyword">set</span> tracking information <span class="token keyword">for</span> this branch you can <span class="token keyword">do</span> so with:    <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用 git 在本地新建一个分支后，需要做远程分支关联。如果没有关联，git 会在下面的操作中提示你显示的添加关联。<br>关联目的是在执行 git pull, git push 操作时就不需要指定对应的远程分支，你只要没有显示指定，git pull 的时候，就会提示你。解决办法如上。</p></blockquote><ul><li><h5 id="错误三"><a href="#错误三" class="headerlink" title="错误三"></a>错误三</h5></li></ul><pre class="line-numbers language-bash"><code class="language-bash">fatal: refusing to merge unrelated histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这个问题是因为两个根本不相干的 git 库，一种方法是从远端库拉下来代码，本地要加入的代码放到远端库下载到本地的库，然后提交上去因为这样的话，你基于的库就是远端的库。当然这样处理过于麻烦，可以使用强制指令：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">git</span> pull --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后正常 push 就可以了，以上问题一般是因为远程仓库有个 README.md 文件，<strong>最好的解决办法就是建仓库时别勾选任何，建一个空的仓库。</strong></p><h3 id="git-版本控制技术的工作原理"><a href="#git-版本控制技术的工作原理" class="headerlink" title="git 版本控制技术的工作原理"></a>git 版本控制技术的工作原理</h3><p><img src="http://qiniu.1542051400.club/blog/git1.png" alt="git原理"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
