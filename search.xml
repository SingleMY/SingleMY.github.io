<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>projectScropeManagment</title>
      <link href="/blog/2020/05/13/projectscropemanagment/"/>
      <url>/blog/2020/05/13/projectscropemanagment/</url>
      
        <content type="html"><![CDATA[<h1 id="项目范围管理"><a href="#项目范围管理" class="headerlink" title="项目范围管理"></a>项目范围管理</h1><p>为达成产品范围所实施的所有活动。产品范围变化项目范围一定变化，反之不然。</p><h2 id="一、-收集需求（Collect-Requirement）"><a href="#一、-收集需求（Collect-Requirement）" class="headerlink" title="一、 收集需求（Collect Requirement）"></a>一、 收集需求（Collect Requirement）</h2><ol><li>技术需求</li><li>项目管理需求</li></ol><a id="more"></a><ul><li>挖掘客户需求：客户提出的不一定是真的需求</li><li>产品需求和商业需求</li></ul><ol start="3"><li><p>输入：</p></li><li><p>收集需求的方法：</p></li></ol><blockquote><p>4.1 Group Creativity Techniques</p></blockquote><ul><li><p>头脑风暴</p><p>特点：面对面的，快（优点），结果不客观（缺点）。<br>具体表现：一言旁；考虑不成熟。</p></li></ul><ul><li><p>Delphi（专家判断）</p><p>特点：背对背，客观（优点），慢（缺点）。</p></li><li><p>质量功能部署 QSD：</p><p>识别客户满意的关键要素。产生措施。实施措施。</p></li><li><p>思维导图</p></li><li><p>姻亲图：分类</p></li><li><p>Multicriteria decision analysis</p><blockquote><p>4.2 Group Decision Making Techniques</p></blockquote></li><li><p>需求分析跟踪矩阵：</p><ul><li>需求描述</li><li>商业需求、机遇、产品目标、目的</li><li>项目目的</li><li>产出物</li><li>产品设计</li><li>产品生产，研发</li><li>测试结果</li></ul></li></ul><h2 id="二、-定义范围（Define-Scope）"><a href="#二、-定义范围（Define-Scope）" class="headerlink" title="二、 定义范围（Define Scope）"></a>二、 定义范围（Define Scope）</h2><ol><li>Expert judgement（专家判断）</li><li>Product analysis</li></ol><ul><li>价值分析：识别功能，确定价值，实现功能。</li></ul><h3 id="项目范围说明书："><a href="#项目范围说明书：" class="headerlink" title="项目范围说明书："></a>项目范围说明书：</h3><ul><li>项目范围描述：比 project charter 更详细</li><li>用户接受标准</li><li>可交付性：</li><li>项目边界：什么不是我应该提交的，什么是应该提交的。</li><li>限制条件：针对范围的。</li><li>假设条件：</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC02</title>
      <link href="/blog/2020/05/12/springmvc02/"/>
      <url>/blog/2020/05/12/springmvc02/</url>
      
        <content type="html"><![CDATA[<h1 id="分析-Spring-webmvc-的启动流程"><a href="#分析-Spring-webmvc-的启动流程" class="headerlink" title="分析 Spring webmvc 的启动流程"></a>分析 Spring webmvc 的启动流程</h1><blockquote><p>Spring MVC 是 Spring 家族中比较有特点的一员，它分离了控制器、模型对象和视图层。Spring 的 MVC 框架是围绕 DispatcherServlet 设计的，主要由 DispatcherServlet、处理器映射、控制器、视图解析器、视图组成，Spring webmvc 启动以 web.xml 为入口，进行 web 初始化，再进行 Spring MVC 初始化。</p></blockquote><a id="more"></a><h2 id="一、-web-初始化"><a href="#一、-web-初始化" class="headerlink" title="一、 web 初始化"></a>一、 web 初始化</h2><h3 id="1-1-从-xml-文件分析"><a href="#1-1-从-xml-文件分析" class="headerlink" title="1.1 从 xml 文件分析"></a>1.1 从 xml 文件分析</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.注册监听器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--第一次初始化的内容--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/WEB-INF/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.过滤器，非必须，但过滤器监听器正常初始化--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>      org.springframework.web.filter.CharacterEncodingFilter    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--3. 初始化（注册）Servlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol><li>Instantiate an instance of each event listener identified by a <listener> element in the deployment descriptor.</listener></li><li>For instantiated listener instances that <em>implement</em> ServletContextListener, call the contextInitialized() method.</li><li>Instantiate an instance of each filter identified by a <filter> element in the deployment descriptor and call each filter instance’s init() method.</filter></li><li>Instantiate an instance of each servlet identified by a <servlet> element that includes a <load-on-startup> element in the order defined by the load-on-startup element values, and call each servlet instance’s init() method.</load-on-startup></servlet></li></ol><ul><li>上面是官网给出的 web 的<strong>初始化</strong>过程，首先注册<strong>根监听器</strong>，接着完成第一次初始化,即注册 applicationContext，并启动 Servlet<strong>监听器</strong>；然后初始化（注册）<strong>过滤器</strong>；再初始化（注册）<strong>Servlet</strong>。其中比较重要的是 ApplicationContext 注册和 Servlet 注册。</li><li>ContextLoaderListener 类起着至关重要的作用。它读取 web.xml 中配置的 context-param 中的配置文件，提前在 web 容器初始化前准备业务对应的 Application context;<strong>将创建好的 Application context 放置于 ServletContext 中</strong>，为<strong>springMVC</strong>部分的初始化做好准备。</li><li>所以三个 xml 的加载顺序是 web.xml 创建 WebApplicationContext；<br>ApplicationContext.xml 加载 bean；至此 web 就已经加载完了，然后是 DispatchServlet.xml，它会把前两个加载的东西拿来做参数，来初始化 DispatchServlet 管控 Spring MVC 部分。</li></ul><h3 id="1-2-从类的关系理解"><a href="#1-2-从类的关系理解" class="headerlink" title="1.2 从类的关系理解"></a>1.2 从类的关系理解</h3><ul><li>最初始的类是 ContextLoader，实现了下面两个个方法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">////创建父容器context，默认是XmlWebApplicationContext</span><span class="token keyword">public</span> WebApplicationContext <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">protected</span> WebApplicationContext <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>ServletContext sc<span class="token punctuation">)</span></code></pre><ul><li>ContextLoaderListener 类,继承了 ContextLoader。实现了 ServletContextListener。</li></ul><h3 id="2-IoC-容器创建"><a href="#2-IoC-容器创建" class="headerlink" title="2. IoC 容器创建"></a>2. IoC 容器创建</h3><p>ApplicationContext 注册就是 IOC 容器的创建，实例化整个上下文中的 bean，所以 ApplicationContext.xml 是这样的：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>关于控制反转的概念，已经在上一篇博文中详细讲述，这里不再赘述，介绍几种创建 IoC 容器的方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**通过xml文件注册的bean的IoC创建*/</span><span class="token comment" spellcheck="true">//classpath</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件路径</span>ApplicationContext getApplicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"配置文件的绝对路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**通过注解注册的bean的IoC容器创建*/</span></code></pre><h3 id="3-Bean-初始化"><a href="#3-Bean-初始化" class="headerlink" title="3. Bean 初始化"></a>3. Bean 初始化</h3><h4 id="3-1-bean-的概念"><a href="#3-1-bean-的概念" class="headerlink" title="3.1 bean 的概念"></a>3.1 bean 的概念</h4><blockquote><p>在 Spring 中，由 Spring IoC 容器管理的对象叫做 beans。 bean 就是由 Spring IoC 容器实例化、组装和以其他方式管理的对象。此外 bean 只是你应用中许多对象中的一个。Spring 框架中，一旦把一个 Bean 纳入到 Spring IoC 容器之中，这个 Bean 的生命周期就会交由容器进行管理。</p></blockquote><h4 id="3-2-bean-的属性"><a href="#3-2-bean-的属性" class="headerlink" title="3.2 bean 的属性"></a>3.2 bean 的属性</h4><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">这个属性是强制性的，并且指定用来创建 bean 的 bean 类。</td></tr><tr><td align="left">name</td><td align="left">这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，至少定义一个 ID 或 name 属性来指定 bean 标识符。</td></tr><tr><td align="left">scope</td><td align="left">这个属性指定由特定的 bean 定义创建的对象的作用域</td></tr><tr><td align="left">constructor-arg</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">properties</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">autowiring mode</td><td align="left">它是用来注入依赖关系的</td></tr><tr><td align="left">lazy-initialization mode</td><td align="left">延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。</td></tr><tr><td align="left">initialization 方法</td><td align="left">在 bean 的所有必需的属性被容器设置之后，调用回调方法。</td></tr><tr><td align="left">destruction 方法</td><td align="left">当包含该 bean 的容器被销毁时，使用回调方法。</td></tr></tbody></table><h4 id="3-3-bean-作用域"><a href="#3-3-bean-作用域" class="headerlink" title="3.3 bean 作用域"></a>3.3 bean 作用域</h4><ul><li>singleton 作用域：默认的作用域。如果你想让 Spring 在每次需要时都返回同一个 bean 实例，你应该声明 bean 的作用域的属性为 singleton。</li><li>prototype 作用域：为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 prototype。</li></ul><h4 id="3-4-生命周期"><a href="#3-4-生命周期" class="headerlink" title="3.4 生命周期"></a>3.4 生命周期</h4><ul><li>实例化：实例化一个 Bean（由 BeanFactory 读取 Bean 定义文件，并生成各个实例）－－也就是我们常说的 new（@Bean）；</li><li>设置属性：按照 Spring 上下文对实例化的 Bean 的属性值进行设置。</li><li>使用初始化：调用 bean 的初始化方法。(将 bean 实例传递给 bean 后置处理器的 postProcessBeforeInitialization()方法)</li><li>bean 可以使用了……</li><li>当容器关闭时，调用 bean 的销毁方法<blockquote><p>在配置 bean 时，通过 init-method 和 destroy-method 属性为 bean 指定初始化和销毁方法.</p></blockquote></li></ul><h4 id="bean-注入的方式"><a href="#bean-注入的方式" class="headerlink" title="bean 注入的方式"></a>bean 注入的方式</h4><ol><li>通过 xml 注入：</li></ol><ul><li>定义 bean</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String sno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>在 ApplicationContext.xml 中注册</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Bean.Student<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="2"><li>通过注解注入：</li></ol><ul><li>首先在 spring 配置文件中开启注解扫描：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.example.spring.mvc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>使用注解声明 bean:</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentHomeWorkJdbc</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>基于 java 类的配置</li></ol><ul><li>使用@Configuration 注解需要作为配置的类，表示该类将定义 Bean 的元数据</li><li>使用@Bean 注解相应的方法，该方法名默认就是 Bean 的名称，该方法返回值就是 Bean 的对象。</li><li>AnnotationConfigApplicationContext 或子类进行加载基于 java 类的配置</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MyService <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、-Spring-MVC-启动流程"><a href="#二、-Spring-MVC-启动流程" class="headerlink" title="二、 Spring MVC 启动流程"></a>二、 Spring MVC 启动流程</h2><h3 id="2-1-分析-DispatcherServlet-xml"><a href="#2-1-分析-DispatcherServlet-xml" class="headerlink" title="2.1 分析 DispatcherServlet.xml"></a>2.1 分析 DispatcherServlet.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--此文件负责整个mvc中的配置--></span>    <span class="token comment" spellcheck="true">&lt;!--启用spring的一些annotation --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置注解驱动 可以将request参数与绑定到controller参数上 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--静态资源映射--></span>    <span class="token comment" spellcheck="true">&lt;!--本项目把静态资源放在了webapp目录下，资源映射如下--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/css/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/css/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/fonts/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/fonts/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/img/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/img/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/js/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP--></span>    <span class="token comment" spellcheck="true">&lt;!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--设置JSP文件的目录位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exposeContextBeansAsAttributes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--自动扫描装配 （base-package由包名决定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="2-2-图解"><a href="#2-2-图解" class="headerlink" title="2.2 图解"></a>2.2 图解</h3><ol><li>客户端请求提交到 DispatcherServlet。</li><li>由 DispatcherServlet 控制器寻找一个或多个 HandlerMapping，找到处理请求的 Controller。</li><li>DispatcherServlet 将请求提交到 Controller。</li><li>Controller 调用业务逻辑处理后返回 ModelAndView。</li><li>DispatcherServlet 寻找一个或多个 ViewResolver 视图解析器，找到 ModelAndView 指定的视图。</li><li>视图负责将结果显示到客户端。<blockquote><p>共包含 4 个 Spring MVC 接口，即 DispatcherServlet、HandlerMapping、Controller 和 ViewResolver。</p></blockquote></li></ol><ul><li><p>Spring MVC 所有的请求都经过 DispatcherServlet 来统一分发，在 DispatcherServlet 将请求分发给 Controller 之前需要借助 Spring MVC 提供的 HandlerMapping 定位到具体的 Controller。</p></li><li><p>HandlerMapping 接口负责完成客户请求到 Controller 映射。</p></li><li><p>Controller 接口将处理用户请求，这和 Java Servlet 扮演的角色是一致的。一旦 Controller 处理完用户请求，将返回 ModelAndView 对象给 DispatcherServlet 前端控制器，ModelAndView 中包含了模型（Model）和视图（View）。</p></li><li><p>从宏观角度考虑，DispatcherServlet 是整个 Web 应用的控制器；从微观考虑，Controller 是单个 Http 请求处理过程中的控制器，而 ModelAndView 是 Http 请求过程中返回的模型（Model）和视图（View）。</p></li><li><p>ViewResolver 接口（视图解析器）在 Web 应用中负责查找 View 对象，从而将相应结果渲染给客户。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-01</title>
      <link href="/blog/2020/05/10/spring-mvc01/"/>
      <url>/blog/2020/05/10/spring-mvc01/</url>
      
        <content type="html"><![CDATA[<h1 id="走近Spring的第一天"><a href="#走近Spring的第一天" class="headerlink" title="走近Spring的第一天"></a>走近Spring的第一天</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring 是一个大家族。但是都有一个共同的特点：控制反转（loC）和面向切面（AOP）。</p><p>首先列举一些相关名词（keyword）：</p><ul><li>六大模块：DAO、ORM、AOP、JEE、WEB、CORE</li><li>家族成员：Spring Framework、Spring MVC、Spring WebFlux、Spring Boot、Spring Cloud、Spring Data、Spring Security</li><li>相关技术： Restful、Redis、Mybatis、Hibernate</li></ul><a id="more"></a><blockquote><p>Spring是于2003 年兴起的一个轻量级的<strong>Java</strong> 开发框架，它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的<strong>JavaBean</strong>来完成以前只可能由EJB完成的事情，我觉得学习它可以让我们更好的把握住一个理念——<strong>解耦</strong>。</p></blockquote><h2 id="六大基本模块"><a href="#六大基本模块" class="headerlink" title="六大基本模块"></a>六大基本模块</h2><ul><li><p>Spring DAO：Spring提供了对<strong>JDBC</strong>的操作支持：<a href="https://www.cnblogs.com/caoyc/p/5630622.html" target="_blank" rel="noopener">JdbcTemplate</a>模板工具类。</p></li><li><p>Spring ORM：Spring可以与ORM框架整合。例如Spring整合Hibernate框架，其中Spring还提供<strong>HibernateDaoSupport</strong>工具类，简化了<strong>Hibernate</strong>的操作。</p></li><li><p>Spring WEB：Spring提供了对<strong>Struts、Springmvc</strong>的支持，支持WEB开发。与此同时Spring自身也提供了基于MVC的解决方案。</p></li><li><p>Spring  AOP：Spring提供<strong>面向切面的编程</strong>，可以给某一层提供<strong>事务管理</strong>，例如在Service层添加事物控制。</p></li><li><p>Spring   JEE：J2EE开发规范的支持，例如<strong>EJB</strong>。</p></li><li><p>Spring Core：提供<strong>IOC容器</strong>对象的创建和处理依赖对象关系。</p><h2 id="两大理念"><a href="#两大理念" class="headerlink" title="两大理念"></a>两大理念</h2><h3 id="控制反转："><a href="#控制反转：" class="headerlink" title="控制反转："></a>控制反转：</h3></li><li><p>通常new一个实例，控制权由程序员控制，而”控制反转”是指new实例工作不由程序员来做而是交给Spring容器来做。。loC容器实现控制反转，它是具有依赖注入功能的容器，是可以创建对象的容器，（容器先创建对象，再利用容器的依赖注入功能用它）IOC容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。在Spring中BeanFactory是IOC容器的实际代表者。因其依赖于“依赖注入”，也可称依赖注入。</p></li><li><p>刚接触理解起来的确困难，明明new一下就可以完事的东西，为啥非要麻烦到容器里去注册下再回来调用呢？答：首先，明确java是一切皆对象，其次，spring为企业应用而生。每一次new的确麻烦，那么容器里注入的对象可以看做是一次全局的new，然后整个项目都可以使用，而且比较统一；其次配置一些参数，比如单例模式的对象，懒加载等；还有定位属于哪个层。</p><h3 id="面向切面："><a href="#面向切面：" class="headerlink" title="面向切面："></a>面向切面：</h3></li><li><p>AOP就是纵向的编程，如业务1和业务2都需要一个共同的操作，与其往每个业务中都添加同样的代码，不如写一遍代码，让两个业务共同使用这段代码。在日常有订单管理、商品管理、资金管理、库存管理等业务，都会需要到类似<strong>日志记录、事务控制、权限控制、性能统计、异常处理及事务处理</strong>等。AOP把所有共有代码全部抽取出来，放置到某个地方集中管理，然后在具体运行时，再由容器动态织入这些共有代码。</p></li><li><h4 id="首先我们来理解一下事务是什么？"><a href="#首先我们来理解一下事务是什么？" class="headerlink" title="首先我们来理解一下事务是什么？"></a>首先我们来理解一下事务是什么？</h4><p>答：事务是独立的、一整套、不可分割的操作，目的是完成用户的一次操作。</p></li></ul><ol><li><p><a href="https://www.cnblogs.com/liantdev/p/10149443.html" target="_blank" rel="noopener">举例</a>：<br>以我们生活中常见的转账为例，service方法要实现将A账户转账到B账户的功能1则该方法内必定要有两个操作：先将A账户的金额减去要转账的数目，然后将B账户加上相应的金额数目。这两个操作必定要全部成功，方才表示本次转账成功；若有任何一方失败，则另一方必须回滚（即全部失败）。事务指的就是这样一组操作：这组操作是不可分割的，要么全部成功，要么全部失败</p></li><li><p>特征：</p></li></ol><ul><li>原子性(Atomicity)：事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li><li>一致性(Consistency)：事务在完成后数据的完整性必须保持一致</li><li>隔离性(Isolation)：多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间的数据要相互隔离</li><li>持久性（Durability）：一个事务一旦被提交，它对数据库中数据的改变应该是永久性的，即使数据库发生故障也不应该对其有任何影响</li></ul><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul><li>切面（Aspect）：其实就是共有功能的实现。</li><li>通知（Advice）：是切面的具体实现。</li><li>连接点（Joinpoint）：就是程序在运行过程中能够插入切面的地点。</li><li>切入点（Pointcut）：用于定义通知应该切入到哪些连接点上。不同的通知通常需要切入到不同的连接点上，这种精准的匹配是由切入点的正则表达式来定义的。</li><li>目标对象（Target）：就是那些即将切入切面的对象，也就是那些被通知的对象。这些对象中已经只剩下干干净净的核心业务逻辑代码了，所有的共有功能代码等待AOP容器的切入。</li><li>代理对象（Proxy）：将通知应用到目标对象之后被动态创建的对象。可以简单地理解为，代理对象的功能等于目标对象的核心业务逻辑功能加上共有功能。</li><li>织入（Weaving）：将切面应用到目标对象从而创建一个新的代理对象的过程。<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4></li><li>Spring使用AOP配置事务管理由三个部分组成，分别是DataSource、TransactionManager和代理机制这三部分，无论哪种配置方式，一般变化的只是代理机制这部分。DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为HibernateTransactionManager。<h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3></li></ul><ol><li>Hibernate框架有很多优点。它们分别如下：</li></ol><ul><li>开源和轻量级： Hibernate框架是根据LGPL许可证和轻量级的开源工具。</li><li>快速性能： Hibernate框架的性能很快，因为缓存在Hibernate框架内部使用。 hibernate框架中有两种类型的缓存：一级缓存和二级缓存。一级缓存默认是启用的。</li><li>数据库独立查询： HQL(Hibernate查询语言)是面向对象的SQL版本。 它生成数据库独立查询。 所以你不需要编写数据库特定的查询语句。 在Hibernate之前，如果项目更改了数据库，我们需要更改SQL查询，从而导致维护变得非常复杂。</li><li>自动创建表： Hibernate框架提供了自动创建数据库表的功能。 因此，无需手动在数据库中创建表。简化复杂连接： 在hibernate框架中可轻松获取多个表中的数据。</li><li>提供查询统计和数据库状态： Hibernate支持查询缓存，并提供有关查询和数据库状态的统计信息。</li></ul><h3 id="友情感谢："><a href="#友情感谢：" class="headerlink" title="友情感谢："></a>友情感谢：</h3><ul><li><a href="https://www.cnblogs.com/xiaoxing/p/5836835.html" target="_blank" rel="noopener">Spring框架IOC容器和AOP解析</a></li><li><a href="https://www.cnblogs.com/liantdev/p/10149443.html" target="_blank" rel="noopener">Spring 事务管理详解</a></li><li><a href="https://www.yiibai.com/hibernate/" target="_blank" rel="noopener">Hibernate</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能基础</title>
      <link href="/blog/2020/05/09/agent/"/>
      <url>/blog/2020/05/09/agent/</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能基础知识总结"><a href="#人工智能基础知识总结" class="headerlink" title="人工智能基础知识总结"></a>人工智能基础知识总结</h1><h2 id="概念及其发展历史（一）"><a href="#概念及其发展历史（一）" class="headerlink" title="概念及其发展历史（一）"></a>概念及其发展历史（一）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>机器或软件所展现的智能</li><li>学术研究领域的名称</li><li>如何创建计算机和计算机软件使之具有智能行为</li></ul><a id="more"></a><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><h4 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h4><ul><li>标志：<br>1956年的“达特茅斯夏季人工智能研究计划”会议。</li><li>相关事件：<br>图灵测试——旨在提供一种令人满意的关于智能的可操作定义<br>视觉图灵测试——是受人类理解图像能力的启发而提出的，是采用一个操作员辅助设备、根据给定的图像产生随机的二元问题序列。<br>中文屋——试图揭示计算机绝不能描述为有“智力”或“知性”，不管它多么智能。结论：图灵测试的结论是不充分的。</li><li>人物：<br>AI之父：Marvin Lee Minsky,John MacCarthy,Herbert ASimon,Allen Newell<h4 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h4></li><li>1950–1956 The Birth of AI AI的诞生</li><li>1956–1974 The Golden Years 黄金之年</li><li>1974–1980 The First AI Winter 第一个AI之冬</li><li>1980–1987 The Boom of AI AI的繁荣期</li><li>1987–1993 The Second AI Winter 第二个AI之冬</li><li>1993–Present The Breakthrough 突破<h4 id="研究领域"><a href="#研究领域" class="headerlink" title="研究领域"></a>研究领域</h4></li><li>知识表示</li><li>机械感知</li><li>机械思维</li><li>机械学习</li><li>机械行为<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4></li><li>弱人工智能：它是无意识的AI，专注于一个具体的任务。</li><li>强人工智能：意味着机器具有将智能用于处理任何问题的能力。它是人工智能研究的主要目标。</li><li>超人工智能：是一个假定的智能体，拥有远远超过聪明和最有天赋的人类大脑的智能。<h4 id="基础学科"><a href="#基础学科" class="headerlink" title="基础学科"></a>基础学科</h4></li><li>哲学</li><li>数学</li><li>经济学</li><li>神经科学</li><li>心理学</li><li>计算机工程</li><li>控制理论和控制论</li><li>语言学<h4 id="典型问题"><a href="#典型问题" class="headerlink" title="典型问题"></a>典型问题</h4></li><li>计算机视觉</li><li>图像处理</li><li>VR, AR 和 MR</li><li>模式识别</li><li>智能诊断</li><li>博弈论和策略规划</li><li>AI游戏和游戏机器人</li><li>机器翻译</li><li>自然语言处理和聊天机器人</li><li>非线性控制和机器人技术</li><li>智能生活</li><li>自动推理</li><li>自动化</li><li>生物计算</li><li>概念计算</li><li>数据挖掘</li><li>知识表示</li><li>语义Web</li><li>垃圾邮件过滤</li><li>诉讼</li><li>机器人学</li><li>混合人工智能</li><li>智能代理</li><li>智能控制</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一年后再拿起VScode(1)</title>
      <link href="/blog/2020/05/08/vscode-1/"/>
      <url>/blog/2020/05/08/vscode-1/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode的代码美化–vue项目"><a href="#VScode的代码美化–vue项目" class="headerlink" title="VScode的代码美化–vue项目"></a>VScode的代码美化–vue项目</h1><p>插件：eslint+vetur+prettier</p><a id="more"></a><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p><font face="楷体" color="">一年前跟学长尝试了一个vue项目，第一次接触编辑器，以前学的C语言和Java原来编译他们那个叫IDE，是集成了编辑器和编译器的，用过ＶS studio，所以第一次拿起vscode就感觉设计哲学很符合自己的心意，但是接下来就让自己脑袋疼起来了，问题就是代码格式化。</font></p><h2 id="全局setting-json"><a href="#全局setting-json" class="headerlink" title="全局setting.json"></a>全局setting.json</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   //字符大小，可自己调整  <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>  //设置tab的站位  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  //在保存时自动格式化代码  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"source.fixAll"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  // 全局使用保存自动格式化功能，vue项目关闭此项!!!!!!!  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // 使用单引号包含字符串   <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // 不添加行尾分号  <span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  //配置终端为cmd便于使用其他命令，如hexo  <span class="token property">"terminal.integrated.shell.windows"</span><span class="token operator">:</span> <span class="token string">"C:\\WINDOWS\\System32\\cmd.exe"</span><span class="token punctuation">,</span>  <span class="token property">"git.enableSmartCommit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>值得注意的是，网上搜了很多教程，但大多数都存在的问题就是，他们的设置不是针对vue项目，而eslint、vetur、prettier这些组件的美化格式是冲突的，所以针对不同的项目要在工作区的setting.json进行不同的配置，来处理他们的冲突。</p><h2 id="工作区的setting-json"><a href="#工作区的setting-json" class="headerlink" title="工作区的setting.json"></a>工作区的setting.json</h2><pre class=" language-json"><code class="language-json">  /* 关闭编辑器自带保存格式化功能，此功能会用Vetur进行格式化。*/  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span></code></pre><p>这一点很重要。vetur可以用来识别.vue文件但是他的格式和eslint的格式不一样，默认vscode使用vetur的格式，而如果项目中引入了eslint依赖，并且setting.json中设置了eslint对html、css、js、vue的格式化，这样针对js文件就有了两种格式化，保存时总是报错（令我一度放弃过eslint）。</p><ul><li><strong>以上的设置是最基本的一些，也是最必要的。当然还有很对配置选项，都可以上官网或者一些（带注释的）教程上找</strong></li></ul><h2 id="eslintrc文件"><a href="#eslintrc文件" class="headerlink" title=".eslintrc文件"></a>.eslintrc文件</h2><p>eslint插件用于根据工程目录的.eslintrc.js配置文件在编辑器中显示一些错误提示，后面的自动格式化根据这里的错误提示进行格式化操作。前提是项目安装了eslint依赖。</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    node<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//这里对eslint和prettier的矛盾做了调整，可查看prettier官网</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span> <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span> <span class="token string">"@vue/prettier"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">"babel-eslint"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"no-console"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"warn"</span> <span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"no-debugger"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"warn"</span> <span class="token punctuation">:</span> <span class="token string">"off"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在.eslintrc.js可以看到总体的eslint规则合并了vue、eslint和prettier的一些插件库进行语法分析(eslint针对js和vue，prettier针对js、html和css,这里eslint和prettier的一些冲突已经处理)<br>eslint很强大，关于其他配置官方给出了文档，vue官方也给出了<a href="https://github.com/vuejs/eslint-config-vue" target="_blank" rel="noopener">标配</a>。<br>下面我列出某个团队自己的规范,相信能看懂，哈哈：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">'babel-eslint'</span><span class="token punctuation">,</span>    sourceType<span class="token punctuation">:</span> <span class="token string">'module'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    node<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es6<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:vue/recommended'</span><span class="token punctuation">,</span> <span class="token string">'eslint:recommended'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add your custom rules here</span>  <span class="token comment" spellcheck="true">//it is base on https://github.com/vuejs/eslint-config-vue</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"vue/max-attributes-per-line"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">"singleline"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      <span class="token string">"multiline"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"max"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"allowFirstLine"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"vue/singleline-html-element-content-newline"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"vue/multiline-html-element-content-newline"</span><span class="token punctuation">:</span><span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">"vue/name-property-casing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"PascalCase"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"vue/no-v-html"</span><span class="token punctuation">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string">'accessor-pairs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'arrow-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'block-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'brace-style'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'1tbs'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'allowSingleLine'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'camelcase'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'properties'</span><span class="token punctuation">:</span> <span class="token string">'always'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-dangle'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'comma-style'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'last'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'constructor-super'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'curly'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'multi-line'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'dot-location'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'property'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'eol-last'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'eqeqeq'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"null"</span><span class="token punctuation">:</span> <span class="token string">"ignore"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'generator-star-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'handle-callback-err'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'^(err|error)$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'indent'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'SwitchCase'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'jsx-quotes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'prefer-single'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'key-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'beforeColon'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'afterColon'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'keyword-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'new-cap'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'newIsCap'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'capIsNew'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'new-parens'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-array-constructor'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-caller'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-console'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'no-class-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-cond-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-const-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-control-regex'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'no-delete-var'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-args'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-class-members'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-dupe-keys'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-duplicate-case'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-empty-character-class'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-empty-pattern'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-eval'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-ex-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extend-native'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-bind'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-boolean-cast'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-extra-parens'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'functions'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-fallthrough'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-floating-decimal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-func-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-implied-eval'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-inner-declarations'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'functions'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-invalid-regexp'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-irregular-whitespace'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-iterator'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-label-var'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-labels'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'allowLoop'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'allowSwitch'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-lone-blocks'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-mixed-spaces-and-tabs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multi-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multi-str'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-multiple-empty-lines'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-native-reassign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-negated-in-lhs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-object'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-require'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-symbol'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-new-wrappers'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-obj-calls'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-octal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-octal-escape'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-path-concat'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-proto'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-redeclare'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-regex-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-return-assign'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'except-parens'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-self-assign'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-self-compare'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-sequences'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-shadow-restricted-names'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-spaced-func'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-sparse-arrays'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-this-before-super'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-throw-literal'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-trailing-spaces'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-undef'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-undef-init'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unexpected-multiline'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unmodified-loop-condition'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unneeded-ternary'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'defaultAssignment'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-unreachable'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unsafe-finally'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-unused-vars'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'vars'</span><span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>      <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token string">'none'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-call'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-computed-key'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-constructor'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-useless-escape'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'no-whitespace-before-property'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-with'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'one-var'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'initialized'</span><span class="token punctuation">:</span> <span class="token string">'never'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'operator-linebreak'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'overrides'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'before'</span><span class="token punctuation">,</span>        <span class="token string">':'</span><span class="token punctuation">:</span> <span class="token string">'before'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'padded-blocks'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'quotes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'single'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'avoidEscape'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'allowTemplateLiterals'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'semi'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'semi-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-before-blocks'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-before-function-paren'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-in-parens'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'space-infix-ops'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'space-unary-ops'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'words'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">'nonwords'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'spaced-comment'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'markers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'globals'</span><span class="token punctuation">,</span> <span class="token string">'eslint'</span><span class="token punctuation">,</span> <span class="token string">'eslint-disable'</span><span class="token punctuation">,</span> <span class="token string">'*package'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'template-curly-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'use-isnan'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'valid-typeof'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'wrap-iife'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'any'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'yield-star-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'both'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'yoda'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'prefer-const'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'no-debugger'</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'object-curly-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      objectsInObjects<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'array-bracket-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'never'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="prettierrc文件"><a href="#prettierrc文件" class="headerlink" title=".prettierrc文件"></a>.prettierrc文件</h2><p>在文件根目录下创建.prettierrc对prettier格式化进行自定义规则设置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  /* 使用单引号包含字符串 */  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /* 不添加行尾分号 */  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  /* 在对象属性添加空格 */  <span class="token property">"bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /* 优化html闭合标签不换行的问题 */  <span class="token property">"htmlWhitespaceSensitivity"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">}</span></code></pre><p>以上就是我的最基本的配置，如有更多关于vscode美化代码的建议，欢迎评论。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>project charter</title>
      <link href="/blog/2020/05/07/project-charter/"/>
      <url>/blog/2020/05/07/project-charter/</url>
      
        <content type="html"><![CDATA[<h1 id="软件项目任务书内容"><a href="#软件项目任务书内容" class="headerlink" title="软件项目任务书内容"></a>软件项目任务书内容</h1><ol><li>组织方授权项目经理去做事</li></ol><a id="more"></a><ol start="2"><li>项目背景信息</li><li>项目经理职责</li><li>项目预算<br>企业项目经验</li><li>风险管理<br>适当的考虑风险<br>比如：三峡项目，考虑到是否会影响环境，具体分析不在是这个阶段给出</li><li>应用场景介绍</li><li>项目周期</li><li>项目约束和限制条件</li><li>项目目标<br>什么是项目范围，什么是产品范围？<br>什么样算是成功：项目预算（budget），时间期限，质量目标。</li><li>项目边界</li></ol><h1 id="项目章程存在的意义"><a href="#项目章程存在的意义" class="headerlink" title="项目章程存在的意义"></a>项目章程存在的意义</h1><ul><li>责权<br>PMI标准<br>.</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次用Git必看</title>
      <link href="/blog/2020/05/06/git/"/>
      <url>/blog/2020/05/06/git/</url>
      
        <content type="html"><![CDATA[<h1 id="git使用细则"><a href="#git使用细则" class="headerlink" title="git使用细则"></a>git使用细则</h1><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><blockquote><p><a href="https://git-scm.com/" target="_blank" rel="noopener">官网下载地址</a>git， 安装目录尽量不要选在系统盘，更改环境变量HOME的的值，可以更改git bash 的默认工作区，即“~”的位置。在HOME值对应的目录下，.gitconfig文件是git的全局配置文件。</p></blockquote> <a id="more"></a><h2 id="git账户配置"><a href="#git账户配置" class="headerlink" title="git账户配置"></a>git账户配置</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name  <span class="token string">"username"</span>  <span class="token comment" spellcheck="true">#--global全局配置，用户级别</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail@example.com"</span></code></pre><h2 id="git远程仓库使用"><a href="#git远程仓库使用" class="headerlink" title="git远程仓库使用"></a>git远程仓库使用</h2><ul><li>git常用的远程仓库有<a href="https://github.com/" target="_blank" rel="noopener">github</a>,<a href="https://gitee.com/" target="_blank" rel="noopener">gitee</a>,<a href="https://about.gitlab.com/" target="_blank" rel="noopener">gitlab</a>等</li><li>git采用ssh协议传输，生成传输公钥：<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span></code></pre>接下来系统提示命名文件名，并输入密码<pre class=" language-bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/e/Git/.ssh/id_rsa<span class="token punctuation">)</span>: a <span class="token comment" spellcheck="true">#&lt;filename>默认 id_rsa</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:<span class="token comment" spellcheck="true">#&lt;password> 一般两次Enter即可</span>Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> a.Your public key has been saved <span class="token keyword">in</span> a.pub.The key fingerprint is:<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre></li><li>生成的公钥是在.ssh文件夹下的xx.pub文件，在git远程仓库账户下添加公钥。<h3 id="远程仓库项目本地更改"><a href="#远程仓库项目本地更改" class="headerlink" title="远程仓库项目本地更改"></a>远程仓库项目本地更改</h3><h4 id="从远程仓库clone"><a href="#从远程仓库clone" class="headerlink" title="从远程仓库clone"></a>从远程仓库clone</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span>  <span class="token comment" spellcheck="true"># 结尾是.git</span><span class="token function">cd</span> 仓库名<span class="token function">git</span> config --local -l  <span class="token comment" spellcheck="true">#check the config information of local</span>或者 <span class="token function">git</span> remote -v     <span class="token comment" spellcheck="true">#查看远程仓库地址</span></code></pre></li><li>一般是clone的远程仓库地址，.git文件夹存在证明是git 本地仓库。<br>.gitignore文件是配置git上传时忽略哪些文件。<h4 id="push到远程仓库"><a href="#push到远程仓库" class="headerlink" title="push到远程仓库"></a>push到远程仓库</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add * 或 <span class="token function">git</span> add <span class="token operator">&lt;</span>filename<span class="token operator">></span> <span class="token comment" spellcheck="true">#添加到本地仓库暂存区（Staging area）</span><span class="token function">git</span> commit -m <span class="token string">"做了哪些更改"</span>     <span class="token comment" spellcheck="true">#提交到本地仓库版本库</span><span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span><span class="token comment" spellcheck="true">#要push的目标远程仓库地址</span><span class="token function">git</span> status                     <span class="token comment" spellcheck="true">#查看git工作区（ working tree）状态</span><span class="token function">git</span> push -u origin master <span class="token comment" spellcheck="true"># 将工作区的master分支推送到远程仓库master分支</span></code></pre></li><li>-u参数：远程仓库没有该分支即创建，并且把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</li></ul><h3 id="本地新项目上传到远程仓库"><a href="#本地新项目上传到远程仓库" class="headerlink" title="本地新项目上传到远程仓库"></a>本地新项目上传到远程仓库</h3><ul><li><p>在项目根目录git bash here</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init  <span class="token comment" spellcheck="true">#初始化git版本库，生成.git文件夹</span><span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span><span class="token function">git</span> add *<span class="token function">git</span> commit -m <span class="token string">"做了哪些更改"</span><span class="token function">git</span> push -u origin master</code></pre></li><li><h5 id="错误一：远程仓库已经更改"><a href="#错误一：远程仓库已经更改" class="headerlink" title="错误一：远程仓库已经更改"></a>错误一：远程仓库已经更改</h5><p>如果此时报错如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        master -<span class="token operator">></span> master <span class="token punctuation">(</span>fetch first<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'https://github.com/SingleMY/MoYang.git'</span>hint: Updates were rejected because the remote contains work that you <span class="token keyword">do</span>hint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: <span class="token punctuation">(</span>e.g., <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.</code></pre><blockquote><p>说明远程仓库和本地版本库比对后，有的文件只在远程仓库有，本地版本库中没有，此时需要pull远程仓库文件到本地版本库：</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/master  master     <span class="token comment" spellcheck="true">#把远程分支与本地分支关联</span><span class="token function">git</span> pull</code></pre></li><li><h5 id="错误二：未关联分支"><a href="#错误二：未关联分支" class="headerlink" title="错误二：未关联分支"></a>错误二：未关联分支</h5><p>如果不关联分支会报错：</p><pre class=" language-bash"><code class="language-bash">There is no tracking information <span class="token keyword">for</span> the current branch.Please specify <span class="token function">which</span> branch you want to merge with.See git-pull<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token keyword">for</span> details.  <span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span></code></pre></li></ul><p>If you wish to set tracking information for this branch you can do so with:</p><pre><code>git branch --set-upstream-to=origin/&lt;branch&gt; master</code></pre><pre><code>&gt;使用git在本地新建一个分支后，需要做远程分支关联。如果没有关联，git会在下面的操作中提示你显示的添加关联。关联目的是在执行git pull, git push操作时就不需要指定对应的远程分支，你只要没有显示指定，git pull的时候，就会提示你。解决办法如上。* ##### 错误三```bashfatal: refusing to merge unrelated histories</code></pre><blockquote><p>这个问题是因为两个根本不相干的git库，一种方法是从远端库拉下来代码，本地要加入的代码放到远端库下载到本地的库，然后提交上去因为这样的话，你基于的库就是远端的库。当然这样处理过于麻烦，可以使用强制指令：</p></blockquote><pre class=" language-bash"><code class="language-bash"> <span class="token function">git</span> pull --allow-unrelated-histories</code></pre><p> 然后正常push就可以了，以上问题一般是因为远程仓库有个README.md文件，<strong>最好的解决办法就是建仓库时别勾选任何，建一个空的仓库。</strong></p><h3 id="git版本控制技术的工作原理"><a href="#git版本控制技术的工作原理" class="headerlink" title="git版本控制技术的工作原理"></a>git版本控制技术的工作原理</h3> <script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 作业管理系统（3）</title>
      <link href="/blog/2020/05/01/zuo-ye-guan-li-xi-tong-spring-mvc/"/>
      <url>/blog/2020/05/01/zuo-ye-guan-li-xi-tong-spring-mvc/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/SingleMY/JavaEE/tree/04" target="_blank" rel="noopener" title="04分支">github源码地址</a></p><h2 id="Spring-MVC是什么？"><a href="#Spring-MVC是什么？" class="headerlink" title="Spring MVC是什么？"></a>Spring MVC是什么？</h2><p>  Spring MVC 是 Spring 提供给 Web 应用的框架设计。Spring MVC 是一个典型的教科书式的 mvc 构架。</p><h2 id="基于Spring-MVC框架的项目"><a href="#基于Spring-MVC框架的项目" class="headerlink" title="基于Spring MVC框架的项目"></a>基于Spring MVC框架的项目</h2><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><ul><li>直接使用Spring MVC不便于管理jar包。在maven项目上添加Spring MVC框架支持，更方便管理大型项目。</li></ul><a id="more"></a><h4 id="新建Maven项目，添加依赖。"><a href="#新建Maven项目，添加依赖。" class="headerlink" title="新建Maven项目，添加依赖。"></a>新建Maven项目，添加依赖。</h4><p><img src="https://img-blog.csdnimg.cn/20200505103005905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意：这里选的是<strong>maven-archetype-webapp</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200506010541215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里注意maven项目的AtifactId就是项目名。<br><img src="https://img-blog.csdnimg.cn/20200506010731655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><font color="red" size="5">这里尤其注意这个setting.xml</font><br>如果以前没有使用过maven构建项目，这次setting.xml一定要配置（没有就新建，也可以进入项目后再新建），否则后果就是下载jar包超级慢，因为默认是国外的镜像，我们把它改成国内的：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mirror         | Specifies a repository mirror site to use instead of a given repository. The repository that         | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used         | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.         |        &lt;mirror>          &lt;id>mirrorId&lt;/id>          &lt;mirrorOf>repositoryId&lt;/mirrorOf>          &lt;name>Human Readable Name for this Mirror.&lt;/name>          &lt;url>http://my.repository.com/repo/path&lt;/url>        &lt;/mirror>         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>uk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://uk.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>CN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>OSChina Central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.oschina.net/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>internal nexus repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;url>http://192.168.1.100:8081/nexus/content/groups/public/&lt;/url>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo.maven.apache.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p>当然还有一些办法解决下载慢的问题，但我都试了，只有这个最快。<br>然后就选择工作区，点击完成即可。</p><h4 id="添加Spring-MVC-框架支持"><a href="#添加Spring-MVC-框架支持" class="headerlink" title="添加Spring MVC 框架支持"></a>添加Spring MVC 框架支持</h4><p>和添加maven框架支持一样，右击项目选择添加框架支持，然后勾选Spring MVC点击完成即可，这里可能要等一会一共有17个jar包，下载完成后项目会在根目录下生成lib文件夹，里面存放着所有下载的jar。将 lib 文件夹移至 WEB-INF 文件夹下，在WEB-INF文件夹下会生成applicationContext.xml和dispatcher-servlet.xml两个Spring MVC的项目配置文件。先别管，更改项目的目录结构，如图：<br><img src="https://img-blog.csdnimg.cn/20200506014320553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按顺序完成，先移动lib文件夹，然后将上个项目的java源文件夹和resources静态资源配置文件夹移动至main文件夹下把Servlet删掉，新建一个Controller文件夹，MVC的C（控制器）我们通过编写Controller来完成，别忘了assets和.jsp文件。然后将applicationContext.xml和dispatcher-servlet.xml移动至resources文件夹。为什么呢？下面我们来说下Spring MVC的目录结构。</p><h4 id="Spring-MVC的目录结构"><a href="#Spring-MVC的目录结构" class="headerlink" title="Spring MVC的目录结构"></a>Spring MVC的目录结构</h4><p><img src="https://img-blog.csdnimg.cn/20200506015411502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><p><strong>java</strong>： Java源码根目录。但是不建议起名叫java，因为这要和接下来要import的包冲突。可以改为其他任何，如果它不是蓝色的且它里面的源文件不是蓝色图标，说明没有把它标记为Java源码根目录。里面全部的java源文件会编译成class文件，放在classes目录下。</p></li><li><p><strong>resources</strong>：Resources（配置）根目录。如果它没有显示三个横杠，把它标记为Resources根目录。这样配置文件路径就是classpath：/文件名。以后引用它的时候可以<strong>路径不出现错误</strong>，尤其是编译后改变目录结构后仍然不出错。</p></li><li><p><strong>webapp</strong>：网页静态文件夹。存放所有部署的网页和其所引用的资源。</p></li><li><p><strong>WEB-INF</strong> ：网页配置信息文件夹。尤其注意<strong>web.xml</strong>文件，极其重要，它决定其他配置文件，其他一切配置都需要在这里注册。比如<strong>applicationContext.xml</strong>和<strong>dispatcher-servlet.xml</strong>。</p></li><li><p><strong>lib</strong>：依赖包库。根据<strong>pom.xml</strong>构建的所有jar包都放在这里。注意别忘了把它添加到module的依赖库中。</p><p>接下来，我们配置文件，重复一下上面的步骤，附截图：</p></li></ol><ul><li><p>标记java源码根目录和Resources根目录（右击目录）：<br><img src="https://img-blog.csdnimg.cn/20200506025500364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>lib库引用：<br><img src="https://img-blog.csdnimg.cn/20200506030311476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="配置pom-xml，web-xml，applicationContext-xml和-dispatcher-servlet-xml"><a href="#配置pom-xml，web-xml，applicationContext-xml和-dispatcher-servlet-xml" class="headerlink" title="配置pom.xml，web.xml，applicationContext.xml和**dispatcher-servlet.xml"></a>配置pom.xml，web.xml，applicationContext.xml和**dispatcher-servlet.xml</h4></li><li><p><strong>pom.xml</strong>：<br>在 pom.xml 文件中添加依赖（分别用于 Servlet 相关、数据库连接池、el表达式、springframework 相关 jar 包），重点学习下<a href="https://blog.csdn.net/javaloveiphone/article/details/7956237" target="_blank" rel="noopener">el表达式和JSTL</a>：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--主要是引入相关jar包，尤其注意sql-connect-java包的引入--></span><span class="token comment" spellcheck="true">&lt;!--servlet--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--数据库连接池--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.slf4j/slf4j-api--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--https://mvnrepository.com/artifact/org.slf4j/slf4j-simple--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--el表达式--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jetbrains<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>annotations-java5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--springframework 相关 jar 包--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><p>你可能会发现，每次更改pom.xml文件都会弹出一个窗口：<br><img src="https://img-blog.csdnimg.cn/20200506031247811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><ul><li>import changes ：依赖更改后，（手动）重新构建。</li><li>enable-auto-import：检测依赖更改，自动添加。<br>如果你发现自动添加让自己不知道是否导入成功，可以在如下图所示处更改，点击上图箭头所示，可以快速进入maven配置界面。</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/20200506031140383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>web.xml</strong> </li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--指定运行后出现界面--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--配置SpringMVC DispatcherServlet--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--配置dispatcher.xml作为mvc的配置文件--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:/dispatcher-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>async-supported</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>async-supported</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--把applicationContext.xml加入到配置文件中--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--过滤器，防止前端向后端传输数据出现中文乱码--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>      org.springframework.web.filter.CharacterEncodingFilter    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>applicationContext.xml</strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--base-package由目录结构决定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li><p><strong>dispatcher-servlet.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--此文件负责整个mvc中的配置--></span>  <span class="token comment" spellcheck="true">&lt;!--启用spring的一些annotation --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 配置注解驱动 可以将request参数与绑定到controller参数上 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--静态资源映射--></span>  <span class="token comment" spellcheck="true">&lt;!--本项目把静态资源放在了webapp目录下，资源映射如下--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/css/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/css/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/fonts/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/fonts/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/images/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/img/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>assets/js/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP--></span>  <span class="token comment" spellcheck="true">&lt;!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--设置JSP文件的目录位置--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exposeContextBeansAsAttributes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--自动扫描装配 （base-package由包名决定--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>理论上我们可以只用一个配置文件配置所有内容，但是MVC讲究的是逻辑分离，文件专用，你懂的！注意：上面引入Spring MVC框架支持时，可能只生成一个SpringMVC***.xml的配置文件，没关系只要注册了上面的配置就可以。然后它对应的是项目设置的这里：<br><img src="https://img-blog.csdnimg.cn/20200506032750254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>右侧可以自己新建和修改。</p><h4 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h4><p><img src="https://img-blog.csdnimg.cn/20200506033733449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>别忘了添加war explored就行。</p><blockquote><p><strong>至此项目构建完成，开始编写代码</strong></p></blockquote><h3 id="Controller编写"><a href="#Controller编写" class="headerlink" title="Controller编写"></a>Controller编写</h3><p>数据库层几乎不需要改动，只需要用Spring MVC提供的Controller完成MVC架构模式的设计即可。关于它的工作原理<a href="http://c.biancheng.net/view/4392.html" target="_blank" rel="noopener">点击这里</a>。</p><h4 id="传值-amp-跳转"><a href="#传值-amp-跳转" class="headerlink" title="传值&amp;跳转"></a>传值&amp;跳转</h4></li><li><p>Controller向jsp传值，并跳转：</p></li></ul><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"homeworklist_student"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String  <span class="token function">Student_Index</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        String nextPage <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理逻辑</span>        String sno <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"sno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentJdbc student_jdbc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentJdbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Model<span class="token punctuation">.</span>sHomework<span class="token operator">></span> homeworkList <span class="token operator">=</span> student_jdbc<span class="token punctuation">.</span><span class="token function">QueryHomework</span><span class="token punctuation">(</span>sno<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Model<span class="token punctuation">.</span>sHomework<span class="token operator">></span> homework_list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherJdbc teacherJdbc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherJdbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Model<span class="token punctuation">.</span>sHomework homework<span class="token operator">:</span> homeworkList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String tname <span class="token operator">=</span> teacherJdbc<span class="token punctuation">.</span><span class="token function">GetTeacherName</span><span class="token punctuation">(</span>homework<span class="token punctuation">.</span><span class="token function">getTno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            homework<span class="token punctuation">.</span><span class="token function">setTname</span><span class="token punctuation">(</span>tname<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>student_jdbc<span class="token punctuation">.</span><span class="token function">QuerySubmit</span><span class="token punctuation">(</span>sno<span class="token punctuation">,</span> homework<span class="token punctuation">.</span><span class="token function">getH_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                homework<span class="token punctuation">.</span><span class="token function">setIsFinished</span><span class="token punctuation">(</span><span class="token string">"已提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                homework<span class="token punctuation">.</span><span class="token function">setIsFinished</span><span class="token punctuation">(</span><span class="token string">"未提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            homework_list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>homework<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"homework_list"</span><span class="token punctuation">,</span> homework_list<span class="token punctuation">)</span><span class="token punctuation">;</span>        nextPage <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nextPage<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里采用request完成传值，通过return返回String类型的数据完成跳转。<br>之所以能完成跳转原因在这：<br><img src="https://img-blog.csdnimg.cn/20200506114814424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>jsp接受并传值给Controller：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Create_Time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Deadline<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Teacher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>State<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Option<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${homework_list}<span class="token punctuation">"</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">varStatus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ${status.count} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${list.getTitle()}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${list.create_time}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${list.getDeadline()}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${list.getTname()}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>${list.getIsFinished()}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary btn-xs<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>homeworkcheck_student?h_id<span class="token punctuation">=</span>${list.h_id}&amp;tname<span class="token punctuation">=</span>${list.getTname()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary btn-xs<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>homeworksubmit.jsp?h_id<span class="token punctuation">=</span>${list.h_id}&amp;title<span class="token punctuation">=</span>${list.title}&amp;content<span class="token punctuation">=</span>${list.content}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>                                 </code></pre><p>上面是JSTL表达式的 c:forEach标签，还有el表达式。两个a标签分别实现了从jsp向controller传值和jsp之间跳转传值。</p><ul><li>Controller向Controller传值和页面跳转：<br>IndexController.java：<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Controller<span class="token punctuation">;</span><span class="token keyword">import</span> jdbc<span class="token punctuation">.</span>StudentJdbc<span class="token punctuation">;</span><span class="token keyword">import</span> jdbc<span class="token punctuation">.</span>TeacherJdbc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span></code></pre></li></ul><p>import main.java.Model.Student;<br>import  main.java.Model.Teacher;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.util.List;<br>import Model.Homework;<br>@Controller<br>public class IndexController {<br>    @RequestMapping(value = “index”)<br>    public String Login(@RequestParam(“login_no”) String login_no,<br>                        @RequestParam(“login_password”) String login_password,<br>                        @RequestParam(“login_identity”) String login_identity,<br>                        HttpServletRequest request, HttpServletResponse response) {</p><pre><code>    ApplicationContext applicationContext = new ClassPathXmlApplicationContext("applicationContext.xml");    String page = "404";    if (login_identity.equals("学生")) {        StudentJdbc student_jdbc = new StudentJdbc();        if (student_jdbc.Student_login(login_no, login_password)) {            //登录成功</code></pre><p>//                List<homework> homework_list = student_jdbc.QueryHomework(login_no);<br>//                request.setAttribute(“code”, “200”);<br>//                request.setAttribute(“status”, “登陆成功”);<br>//                request.setAttribute(“homework_list”, homework_list);<br>                request.getSession().setAttribute(“sno”, login_no);<br>                page = “redirect:/homeworklist_student”;<br>            } else {<br>                request.setAttribute(“code”, “400”);<br>                request.setAttribute(“status”, “登陆失败”);<br>                request.setAttribute(“homework_list”, null);<br>                page = “index”;<br>            }</homework></p><pre><code>    } else {        TeacherJdbc teacher_jdbc = new TeacherJdbc();        if (teacher_jdbc.Teacher_login(login_no, login_password)) {            List&lt;Homework&gt; homework_list = teacher_jdbc.QueryHomework(login_no);            request.setAttribute("homework_list", homework_list);            request.getSession().setAttribute("tno", login_no);            page = "teacher";        }    }    return page;}@RequestMapping(value = "register")public String Register(@RequestParam("register_no") String register_no,                    @RequestParam("register_name") String register_name,                    @RequestParam("register_password") String register_password,                    @RequestParam("register_identity") String register_identity,                    HttpServletRequest request) {    ApplicationContext applicationContext = new ClassPathXmlApplicationContext("applicationContext.xml");    String page = "404";    if(register_identity.equals("学生")) {        Student student = new Student(register_no,register_name,register_password);        StudentJdbc student_jdbc = new StudentJdbc();        student_jdbc.InsertStudent(student);        page = "index";    }else if (register_identity.equals("教师")){        Teacher teacher = new Teacher(register_no,register_name,register_password);        TeacherJdbc teacher_jdbc = new TeacherJdbc();        teacher_jdbc.AddTeacher(teacher);        page = "index";    }    return page;}</code></pre><p>}</p><pre><code>controller之间的跳转有redirect和forword两种方法。* 总结: 传值一共有五种方式，[点击这里](https://blog.csdn.net/qq_40646143/article/details/79536909).### 总结[Spring MVC 过时了吗？](https://www.zhihu.com/question/294282002)答：编程首先是思想活动，MVC是百年的根基，正在跟进时代潮流，采用前后端分离，响应式的方式(WebFlux)。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA创建的web项目Maven改造（2）</title>
      <link href="/blog/2020/04/30/idea-chuang-jian-de-web-xiang-mu-maven-gai-zao/"/>
      <url>/blog/2020/04/30/idea-chuang-jian-de-web-xiang-mu-maven-gai-zao/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/SingleMY/JavaEE/tree/02" target="_blank" rel="noopener" title="02分支">github源码地址</a></p><h2 id="IDEA创建的web项目Maven改造"><a href="#IDEA创建的web项目Maven改造" class="headerlink" title="IDEA创建的web项目Maven改造"></a>IDEA创建的web项目Maven改造</h2><hr><h3 id="Maven是什么？为什么用Maven-或者说它能干什么？"><a href="#Maven是什么？为什么用Maven-或者说它能干什么？" class="headerlink" title="Maven是什么？为什么用Maven?或者说它能干什么？"></a>Maven是什么？为什么用Maven?或者说它能干什么？</h3><ol><li>简单说它是项目构建管理工具，类似npm、yum那样的包管理，也可以理解为是个框架。</li><li>如果项目非常庞大，就不适合使用package来划分模块，最好是每一个模块对应一个工程，利于分工协作。</li><li>普通项目：项目中使用jar包，需要“复制”、“粘贴”项目的lib中; jar包需要的时候每次都要自己准备好或到官网下载; 一个jar包依赖其他的jar包需要自己手动的加入到项目中。<ol start="4"><li>借助于maven，可以将jar包保存在“仓库”中，不管在哪个项目只要使用引用即可就行。借助于maven，所有的jar包都放在“仓库”中，所有的项目都使用仓库的一份jar包。借助于maven，它会自动的将依赖的jar包导入进来。</li></ol></li></ol><a id="more"></a><h3 id="开始行动"><a href="#开始行动" class="headerlink" title="开始行动"></a>开始行动</h3><ul><li>打开项目，右击项目根目录，选择“添加框架支持”（Add Framework Support）,如图，勾选maven，点击确定。<br><img src="https://img-blog.csdnimg.cn/2020050411565792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>完成后项目多一个pom.xml文件，并且项目目录变成src目录下多了一个main文件夹，它用来放置java源码和web网页文件的源码，这里需要手动把原来web文件夹移动到main目录下，并更名为webapp（这是默认命名），更改后看到上面有个蓝点，代表成功完成,如图。<blockquote><p><strong>pom.xml：Project Object Model 项目对象模型。它是maven的核心配置文件，所有的构建的配置都在这里设置。</strong></p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/20200504121108594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>配置pom.xml文件：</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--公司或组织域名.组织.项目(模块)名，    域名：eg: cn(China)，org(非营利组织)，com(商业组织)    组织：个人的小项目为 Only    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.Only.JavaEE02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--project/module--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>JavaEE02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--版本号--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></code></pre><p>  使用上面的三个向量（也称为<strong>坐标</strong>）在仓库中唯一的定位一个maven工程。</p><ul><li>继续配置pom.xml文件：</li></ul><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>war<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>UTF8<span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>encoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>encoding<span class="token operator">></span>        <span class="token operator">&lt;</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token comment" spellcheck="true">//符合自己的JDK版本</span>        <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span><span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span>        <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span><span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020050413261848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><strong><font color="red">重要提示:当IDEA右下角弹出弹窗import change 时一定选择该项点击。</font></strong></p></blockquote><ul><li>检查如图所示：</li></ul><p><img src="https://img-blog.csdnimg.cn/20200504124937146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><strong>至此我们maven改造完成，接下来我们新建个项目，使用project/module模式，然后将这个改造好的maven项目移植到这个module模式的项目中。</strong></p></blockquote><blockquote><p>如果你对maven还很迷糊儿，欢迎点击这里<a href="https://baijiahao.baidu.com/s?id=1645696793286345333" target="_blank" rel="noopener">Maven最全笔记</a>，大佬一定能解决你99%的疑问。好了，我们休息一会…</p></blockquote><h2 id="使用project-module模式"><a href="#使用project-module模式" class="headerlink" title="使用project/module模式"></a>使用project/module模式</h2><hr><h3 id="project和module的关系："><a href="#project和module的关系：" class="headerlink" title="project和module的关系："></a>project和module的关系：</h3><p><img src="https://img-blog.csdnimg.cn/20200504131434516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><strong>如果你使用过Eclipse，很容易理解，为什么使用project/module模式？<br>答：因为这样每个module可以独立成我们以前开发的那种小项目，便于管理大项目。</strong> </p></blockquote><ul><li>IntelliJ系中的 Project  相当于Eclipse系中的  Workspace ；</li><li>IntelliJ系中的 Module  相当于Eclipse系中的  Project ；</li><li>IntelliJ中一个 Project  可以包括多个  Module ；</li><li>Eclipse中一个 Workspace  可以包括多个  Project；</li></ul><h3 id="开始行动-1"><a href="#开始行动-1" class="headerlink" title="开始行动"></a>开始行动</h3><ul><li>新建一个空的Maven工程，如图：<br><img src="https://img-blog.csdnimg.cn/20200504132858190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ul><li>添加GroupId和ArtifactId，ArtfactId就是整个工程文件（project）名。<br><img src="https://img-blog.csdnimg.cn/20200504133157136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后下一步，选择项目储存位置，确定即可。</li></ul></li></ul><ul><li>创建module，右击工程文件目录：<br><img src="https://img-blog.csdnimg.cn/20200504133659475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>勾选Maven，下一步：<br><img src="https://img-blog.csdnimg.cn/20200504133909235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>确定Parent，ArtifactId，下一步：<br><img src="https://img-blog.csdnimg.cn/20200504134207699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><strong>新建完成后删除原有的src文件夹</strong> ，使用同样的方法，创建 Core 及 Database 两个 module。Core： 用来包含一些常用变量；Database：数据层，与数据库连接有关的类。如图所示：<br><img src="https://img-blog.csdnimg.cn/20200504140050845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将上一个改造好的Maven项目，移植到这个JavaEE31（module）中：<br><img src="https://img-blog.csdnimg.cn/20200504141953859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>配置该module的pom.xml文件：</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.encoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>10.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>10.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>10.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p>import changes,别忘了！</p><ul><li>然后打开Tomcat配置（如果没有添加Tomcat，再添加一下template即可），选择这个要运行的module的exploder。路径设置为“/”。<br><img src="https://img-blog.csdnimg.cn/20200504142629918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>运行成功！<h2 id="优化数据库连接池"><a href="#优化数据库连接池" class="headerlink" title="优化数据库连接池"></a>优化数据库连接池</h2></li></ul><hr><h3 id="数据库连接优化的原因"><a href="#数据库连接优化的原因" class="headerlink" title="数据库连接优化的原因"></a>数据库连接优化的原因</h3><ol><li>之前的JDBC连接不安全，比如同一个用户在两处同时访问一个数据库，这会造成线程不安全。</li><li>把访问数据库的每一步封装一个函数，生成日志，这样便于事务管理。</li></ol><h3 id="开始行动-2"><a href="#开始行动-2" class="headerlink" title="开始行动"></a>开始行动</h3><ul><li>第一步，添加依赖，完善pom.xml文件：</li></ul><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ul><li><p>数据库连接的用户名密码等放在配置文件中<br> 比如我新建一个db.properties文件，它是HikariConfig类的读取对象。<br> 放在resources文件夹下：<br><img src="https://img-blog.csdnimg.cn/20200504144510598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>JdbcUtil.java(JDBC连接对象的工具类）</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *用于获取数据库连接对象的工具类。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DataSource dataSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>Connection<span class="token operator">></span> tl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>jdbc<span class="token punctuation">.</span>JdbcUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *获取数据库连接对象的方法，线程安全     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从当前线程中获取连接对象</span>        Connection connection <span class="token operator">=</span> tl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断为空的话，创建连接并绑定到当前线程</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    connection <span class="token operator">=</span> <span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *释放资源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span> Statement statement<span class="token punctuation">,</span> ResultSet resultSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"关闭ResultSet对象异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>statement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"关闭Statement对象异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注意：这里不关闭连接</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tl<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"关闭Connection对象异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *开启事务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *提交事务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> tl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"提交事务失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *回滚事务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> tl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"回滚事务失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDataSource</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbc<span class="token punctuation">.</span>JdbcUtil<span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>        tl<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *创建数据库连接     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Connection <span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dataSource <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"创建数据源失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得连接</span>        conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *根据指定配置文件创建数据源对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            HikariConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariConfig</span><span class="token punctuation">(</span><span class="token string">"/db.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建数据源失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在TeacherJdbc.java和StudentJdbc.java中修改使用方式（提示：可以借助<a href="https://jingyan.baidu.com/article/546ae18551231f5148f28c14.html" target="_blank" rel="noopener">IDEA的查找替换功能</a>，多出代码同时替换），更新和查询操作示例：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Teacher_login</span><span class="token punctuation">(</span>String sno<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PreparedStatement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        String sql<span class="token operator">=</span> <span class="token string">"SELECT PASSWORD FROM TEACHER WHERE TNO=(?) "</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接</span>            conn <span class="token operator">=</span> jdbc_util<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 开启事务，非自动提交</span>            jdbc_util<span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建可执行语句</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sno<span class="token punctuation">)</span><span class="token punctuation">;</span>            ResultSet rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            jdbc_util<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事务回退</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放资源，结果集设置为null</span>            jdbc_util<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> stmt<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddTeacher</span><span class="token punctuation">(</span>Teacher teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PreparedStatement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        String sql<span class="token punctuation">;</span>        sql <span class="token operator">=</span> <span class="token string">"INSERT INTO TEACHER VALUES (?,?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接</span>            conn <span class="token operator">=</span> jdbc_util<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 开启事务，非自动提交</span>            jdbc_util<span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建可执行语句</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> teacher<span class="token punctuation">.</span><span class="token function">getTno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> teacher<span class="token punctuation">.</span><span class="token function">getTname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> teacher<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            jdbc_util<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//事务回退</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放资源，结果集设置为null</span>            jdbc_util<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> stmt<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>主要改动这几处：<br><img src="https://img-blog.csdnimg.cn/20200504145727539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>最后检查服务器依赖是否全部引入，如果没有按箭头所示引入。<br><img src="https://img-blog.csdnimg.cn/20200504150143405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxNjk1Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet+JSP+MySQL的作业管理系统（1）</title>
      <link href="/blog/2020/04/29/servlet-jsp-mysql-de-zuo-ye-guan-li-xi-tong-1/"/>
      <url>/blog/2020/04/29/servlet-jsp-mysql-de-zuo-ye-guan-li-xi-tong-1/</url>
      
        <content type="html"><![CDATA[<p><strong>github 源码连接<a href="https://github.com/SingleMY/JavaEE/tree/01" target="_blank" rel="noopener">点击这里</a></strong></p><a id="more"></a><h2 id="1-知识储备"><a href="#1-知识储备" class="headerlink" title="1. 知识储备"></a>1. 知识储备</h2><ul><li><p><strong>Mysql</strong><br> 数据库语句知识，基本可以用到的都是简单的增删改查表记录语句，学习地址：<a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">菜鸟教程的MySQL</a>。<br> jdbc连接：</p><pre class=" language-java"><code class="language-java">   Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//注册驱动</span>   Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建连接</span>   String sql<span class="token operator">=</span> <span class="token string">"INSERT INTO STUDENT VALUES (?,?,?)"</span><span class="token punctuation">;</span>   PrepareStatement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建语句</span>   stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置参数</span>   stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行更新语句，还有一种执行查询操作 stmt.executeQuery();</span></code></pre></li><li><p><strong>Servlet</strong> </p><blockquote><p>Servlet 通过调用 init () 方法进行初始化。<br>  Servlet 调用 service() 方法来处理客户端的请求,service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。<br>  Servlet 通过调用 destroy() 方法终止（结束）。<br>  最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// WebServlet注解表示这是一个Servlet，并映射到地址/:</span>  <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置响应类型:</span>                resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>Homework<span class="token operator">></span> homework_list <span class="token operator">=</span> student_jdbc<span class="token punctuation">.</span><span class="token function">QueryHomework</span><span class="token punctuation">(</span>login_no<span class="token punctuation">)</span><span class="token punctuation">;</span>                req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"homework_list"</span><span class="token punctuation">,</span> homework_list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//setAttribute方法设置属性，传数据</span>                req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"sno"</span><span class="token punctuation">,</span>login_no<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Session 识别用户的标志</span>                req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"student.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// getRequestDispatcher方法跳转网页，forword传递参数</span>                <span class="token comment" spellcheck="true">// 获取输出流:</span>                PrintWriter pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 写入响应:</span>                pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello, world!&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 最后不要忘记flush强制输出:</span>                pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><blockquote><p>一个Servlet总是继承自HttpServlet，然后覆写doGet()或doPost()方法。注意到doGet()方法传入了HttpServletRequest和HttpServletResponse两个对象，分别代表HTTP请求和响应。我们使用Servlet API时，并不直接与底层TCP交互，也不需要解析HTTP协议，因为HttpServletRequest和HttpServletResponse就已经封装好了请求和响应。以发送响应为例，我们只需要设置正确的响应类<br>  型，然后获取PrintWriter，写入响应即可。</p></blockquote><blockquote><p><strong>getRequestDispatcher()和sendRedirect()区别</strong></p></blockquote><ol><li><p>request.getRequestDispatcher()是请求转发，前后页面共享一个request ;<br>   response.sendRedirect()是重新定向，前后页面不是一个request。<br>   request.getRequestDispather();返回的是一个RequestDispatcher对象。</p></li><li><p>RequestDispatcher.forward()是在服务器端运行;<br>   HttpServletResponse.sendRedirect()是通过向客户浏览器发送命令来完成.<br>   所以RequestDispatcher.forward()对于浏览器来说是“透明的”；<br>   而HttpServletResponse.sendRedirect()则不是。</p></li></ol></li><li><p><strong>JSP</strong></p><blockquote><p>整个JSP的内容实际上是一个HTML，但是稍有不同：</p></blockquote><p>  包含在&lt;%–和–%&gt;之间的是JSP的注释，它们会被完全忽略；<br>  包含在&lt;%和%&gt;之间的是Java代码，可以编写任意Java代码；<br>  如果使用&lt;%= xxx %&gt;则可以快捷输出一个变量的值。</p><blockquote><p>JSP页面内置了几个变量：</p></blockquote><p>  <strong>out</strong>：表示HttpServletResponse的PrintWriter；</p><p>  <strong>session</strong>：表示当前HttpSession对象；</p><p>  <strong>request</strong>：表示HttpServletRequest对象。</p><pre><code>这几个变量可以直接使用。</code></pre><h2 id="2-项目介绍"><a href="#2-项目介绍" class="headerlink" title="2. 项目介绍"></a>2. 项目介绍</h2></li></ul><hr><h3 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h3><p>  完成了用户注册登录功能，对于教师，可以查看自己所教授学生、查看自己所布置的作业、添加学生和布置作业，对于学生，可以查看自己老师布置的作业、完成作业。</p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>  使用Powerdesigner画出概念模型图（ER图 .cdm），生成物理模型（.pdm），导出sql脚本文件，使用Navicat for Mysql 创建数据库执行脚本，完成数据库设计。ER图如下：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503162258804-373712748.png" alt=""></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>  工程文件截图：</p><p><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503162424411-1619630011.png" alt=""></p><blockquote><p><strong>Java源代码</strong>在com.homework.java文件夹下，包括JDBC连接、Model模型构建和Servlet设计。<br>           * jdbc封装个工具类jdbcUtil。StudentJdbc和TeacherJdbc都调用这个工具类的对象完成驱动注册和连接，可以避免代码重复。<br>           * 工程开始，最先着手于数据库设计，所以最开始编写的就是model，基本就是数据库每个表一个model，用于数据访问。<br>           * Servlet和网页设计同步进行，因为这不是前后端分离开发，按操作，几乎每一个操作对应着一个Servlet和一个JSP网页 </p></blockquote><h3 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h3><ol><li><p>用户登录注册界面，根据不同身份，登录进入系统后的功能也不同：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503163853767-2119014305.png" alt=""></p><blockquote><p>教师</p></blockquote></li><li><p>查看自己布置的作业，会统计学生提交的人数，还可以编辑作业：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503164213797-1874667342.png" alt=""></p></li><li><p>布置作业：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503164343857-223799618.png" alt=""></p><p>布置完成：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503164909235-1046381890.png" alt=""></p></li><li><p>查看自己教授的学生信息：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503164506806-617003446.png" alt=""></p></li><li><p>添加学生：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503164551575-1642489671.png" alt=""><br>添加完成<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503164827473-1430803927.png" alt=""></p><blockquote><p>学生</p></blockquote></li></ol><ol start="6"><li><p>查看自己老师布置的作业，会显示是否已经提交：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503164747799-1627741793.png" alt=""></p></li><li><p>提交作业：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503165005915-1774263571.png" alt=" "></p><p>提交完成后：<br><img src="https://img2020.cnblogs.com/blog/1735970/202005/1735970-20200503165046153-845225822.png" alt=""></p></li></ol><h2 id="3-总结："><a href="#3-总结：" class="headerlink" title="3. 总结："></a>3. 总结：</h2><blockquote><p>一个项目的完成需要精细了思路和扎实的基础知识。设计是完成的一半，一定要先学习相关知识，最好有个类似的项目研究技术。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始基于Hexo+GitHub搭建blog的历程</title>
      <link href="/blog/2020/04/28/ji-yu-hexo-github-da-jian-blog-de-li-cheng/"/>
      <url>/blog/2020/04/28/ji-yu-hexo-github-da-jian-blog-de-li-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><hr><p><font face="楷体" color="">　　作为软件工程专业大三的学生，随着接触的专业知识越来越多，搭建博客是必要的，当然可以选择当下受欢迎的博客网站<a href="https://www.csdn.net/" target="_blank" rel="noopener" title="CSDN博客首页">CSDN</a>、<a href="https://www.cnblogs.com/" target="_blank" rel="noopener" title="cnblog首页">博客园</a>和<a href="https://www.jianshu.com/" target="_blank" rel="noopener" title="简书首页">简书</a>等，我在这几个网站也都注册了账号，但在别人的网站总是有“约束”，不能体现一个软件开发者的追求，也不能满足我对知识的需求。但可以把自己的好文章多发布几个平台，增加阅读量。用框架搭建自己的博客也很简单，当然也可以自己写网站（后续更新）。闲话不多说，上干货。</font></p><a id="more"></a><h1 id="简介-本文只针对Windows平台"><a href="#简介-本文只针对Windows平台" class="headerlink" title="简介  (本文只针对Windows平台)"></a>简介  <font size="3">(本文只针对Windows平台)</font></h1><hr><ul><li>首先，<a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="noopener" title="What is Github?">Github</a>提供代码托管功能，<a href="https://pages.github.com/" target="_blank" rel="noopener" title="What is Github Pages?">GitHub Page</a>可以把GitHub仓库中某一分支的代码由HTTP访问到,这两部分提供良好的服务器；接下来，前端网页使用<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener" title="博客框架">Hexo</a>简洁的博客框架构建；最后一步，就是把在本地编辑好的博客页面部署在GitHub上。<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2></li></ul><ol><li><h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2></li></ol><ul><li><p>Hexo是博客<a href="https://www.zhihu.com/question/19558524" target="_blank" rel="noopener" title="什么是框架？">框架</a>，框架特点是<em>快速、简洁且高效</em>，Hexo 使用 <a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener" 菜鸟教程markdown""="">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></li><li><p>Hexo基于<a href="https://nodejs.org/en/" target="_blank" rel="noopener" title="Node.js官网下载">Node.js</a>（简单说Node.js就是JavaScript的解析器）,并且我们通常使用hexo关于git管理组件：<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener" title="Git deployer plugin for Hexo">hexo-delopyer-git</a>发布博客文章,所以<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener" title="中文官网教程">安装Hexo</a>前一般先安装<strong>Node.js</strong>和<strong>Git</strong>环境。</p></li></ul><h1 id="搭建历程"><a href="#搭建历程" class="headerlink" title="搭建历程"></a>搭建历程</h1><hr><ol><li><h2 id="在GitHub上建仓库"><a href="#在GitHub上建仓库" class="headerlink" title="在GitHub上建仓库"></a>在GitHub上建仓库</h2></li></ol><ul><li><h3 id="注册登录账号（有账号请略过）"><a href="#注册登录账号（有账号请略过）" class="headerlink" title="注册登录账号（有账号请略过）"></a>注册登录账号（有账号请略过）</h3></li></ul><p>访问<a href="https://github.com/" target="_blank" rel="noopener">github</a>官网首页，输入邮箱地址，点击Get started按钮，然后填写用户名、密码等信息提交即可。</p><p>点击<a href="https://github.com/login" target="_blank" rel="noopener">Sign in</a>按钮,输入用户名、密码登录即可。</p><ul><li><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3></li></ul><p>点击右上角的“+”，选择new repository，然后填写仓库的相关信息，仓库名定义为: <em>你的用户名.github.io</em>　并且不能让仓库为空，可以勾选初始化一个README.md文件。然后完成即可。</p><blockquote><p><font face="“黑体”" size="3">注意: Github Pages的Repository名字是特定的，比如我Github账号是moyang0909，那么我Github Pages Repository名字就是 <em>moyang0909.github.io</em>。 </font></p></blockquote><ul><li><h3 id="使用Github-Pages"><a href="#使用Github-Pages" class="headerlink" title="使用Github Pages"></a>使用Github Pages</h3></li></ul><p>点击右上角Setting按钮，看到仓库设置信息，找到GitHub Pages选项，<br>看到如下图所示，表示仓库master分支代码可在GitHub Pages上成功访问了，试试在浏览器的地址栏输入”你github的用户名.github.io”吧！。图上箭头所指处是用于<a href="https://www.jianshu.com/p/da20ddc03cdf" target="_blank" rel="noopener" title="仅供参考">绑定自己的域名</a>，这里先不绑定了。</p><ol start="2"><li><h2 id="本地安装Git环境"><a href="#本地安装Git环境" class="headerlink" title="本地安装Git环境"></a>本地安装Git环境</h2></li></ol><ul><li><h3 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h3></li></ul><blockquote><p>如果不了解Git是什么，可以参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener" title="最好的Git教程">廖雪峰老师的Git教程</a>或者<a href="https://www.cnblogs.com/best/p/7474442.html#_lab2_1_0" target="_blank" rel="noopener" title="理解Git工作原理">张果老师的Git笔记</a>。简言之，Git是分布式版本控制系统，这里我们用它连接远程的github仓库，管理代码，值得说的一点是有了git我们可以不用点击网页就可以下载github上的代码，只需要记得几个git命令，很方便、流行。</p></blockquote><ul><li><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3></li></ul><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">官网下载Git</a>安装程序，选择下载<em>64-bit Git for Windows Setup</em>。</p><p>下载完成后运行程序，一直Next配置默认就好了，如果需要设置就要仔细读一下安装界面上的选项。安装完成后打开Git bash(Git的命令行工具)，如下图。</p><p>我这里把起始位置设置为E:/Git文件夹，就是在环境变量中找到系统变量的HOME值修改即可，不改也可以。还需要最后一步设置，在bash命令行输入：（小提示：git bash 的粘贴键是键盘的<em>insert</em>键）</p><pre class=" language-bash"><code class="language-bash">    $ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>    $ <span class="token function">git</span> config --global user.email <span class="token string">"youremail@example.com"</span></code></pre><blockquote><p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置。</p></blockquote><ul><li><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3></li></ul><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置:</p><p><strong>第1步：创建SSH Key:</strong></p><p>在bash命令行输入：</p><pre class=" language-bash"><code class="language-bash">   $ ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span></code></pre><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件。</p><p><strong>第2步：登陆GitHub，打开“Settings”，“SSH Keys”页面：</strong></p><p>然后，点“Add SSH Key”，填上任意title，在Key文本框里粘贴id_rsa.pub文件的内容。</p>{% asset_img git-04.png github 托管 %}<p>点击“Add SSH key”，你就应该看到已经添加的key。Git还有很多知识，比如它可以本地版本库，可以多人协作等等……</p><p><strong>至此，有关Github的工作就完成了！恭喜你完成了三分之一！</strong></p><blockquote><blockquote><p>我们休息一会…… </p></blockquote></blockquote><ol start="3"><li><h2 id="安装Node-js和Hexo"><a href="#安装Node-js和Hexo" class="headerlink" title="安装Node.js和Hexo"></a>安装Node.js和Hexo</h2></li></ol><ul><li><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener" title="中文官网下载地址">官网下载Node.js</a>安装程序，建议下载稳定版本。</li></ul>{% asset_img node-01.png node 官网 %}<p>下载完成后启动安装程序，也是一直Next，选择一个自定义的安装路径，比如我的安装路径为D:\development environment\node\。接着要配置环境变量：</p>{% asset_img node-02.png 环境变量 %}<p>打开控制面板，找到系统属性，依次点击高级系统设置，环境变量，找到用户变量下的Path变量，双击编辑添加值为Node.js的安装路径。然后一路确定保存设置即可。</p>{% asset_img node-03.png 环境变量添加 %}<ul><li><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3></li></ul><p>打开命令行，进入Node.js的安装目录，执行如下命令：</p><pre class=" language-npm"><code class="language-npm">    npm install -g hexo</code></pre><p>  或</p><pre class=" language-npm"><code class="language-npm">    npm install -g hexo-cli</code></pre><p>使用<a href="https://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener" title="What is npm?">npm</a>命令全局安装hexo完成,命令行别关。</p><ol start="4"><li><h2 id="建立博客网站"><a href="#建立博客网站" class="headerlink" title="建立博客网站"></a>建立博客网站</h2></li></ol><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class=" language-hexo"><code class="language-hexo">    hexo init <folder>    cd <folder>    npm install          //安装依赖包</code></pre><p><strong>至此，博客搭建成功</strong>！当然，仅仅是本地的，革命尚未成功。<br>新建完成后，指定文件夹的目录如下：</p><ul><li><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3></li></ul><blockquote><p>其中<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener" title="修改配置">_config.yml</a>文件是配置信息文件，接下来我们来熟悉、并修改以下内容。</p></blockquote><pre><code>    title:        网站标题//修改为自己的网站名    author:       您的名字    language:     网站使用的语言。//使用不同的主题可能需要设置 成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Han和 zh-CN。    timezone:     网站时区。//Hexo 默认使用您电脑的时区。一般的，可以使用 Asia/Shanghai。    url:          网址//修改为你的github pages地址    theme:        当前主题名称。//暂时不修改一会更改主题时需要修改这里</code></pre><p>以下三个参数尤其重要：</p> <p><strong>如果某一项参数没有就新建，注意冒号后边有空格。如果你忘记了github 代码仓库的clone地址，可以打开把图上的SingleMY换成你的github账户名。<a href="https://github.com/你的github账户/你的github账户.github.io.git" target="_blank" rel="noopener">https://github.com/你的github账户/你的github账户.github.io.git</a></strong>  </p><p>接下来，回到你的cmd窗口，执行如下命令：</p><pre><code>    npm install hexo-deployer-git --save     hexo g   (生成静态页面)    hexo d   (将本地blog部署到github的仓库)</code></pre><p>现在，试试在浏览器的地址栏输入：“你的用户名.github.io”，此时，你应该会看到这样的界面：</p><blockquote><p><strong>至此，一个博客框架就这样部署完了，接下来我们熟悉下这个框架的结构，并且更改下主题，因为这个主题实在是太丑了</strong></p></blockquote><ul><li><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3></li></ul><p><a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener" title="中文官网主题介绍">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><blockquote><p>可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网选择主题</a>，下载按钮是蓝色粗体标题字样。更推荐点击<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener" title="下载主题">这里</a><br>选择自己喜欢的主题，其中较为流行的一个是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>，不过我更喜欢<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">yilia-plus</a>。</p></blockquote><blockquote><p>在刚刚那个网站上，点击右边的链接可以看到主题的Demo，选则一个喜欢的主题然后点击左边的链接进入github上（以yilia-plus为例）：</p></blockquote><p>按上图所示，依次执行命令：</p><pre class=" language-git"><code class="language-git">    cd ./themes/    git clone --depth=1 https://github.com/JoeyBling/hexo-theme-yilia-plus.git ./yilia-plus</code></pre><p>这时你会发现themes文件夹下多了一个yilia-plus文件夹。</p><p>然后修改hexo根目录下的 _config.yml ➡️ <strong>theme: yilia-plus</strong>。</p><blockquote><p>选择它的原因除了美观以外，最重要的原因是它功能集成的全，当然这都需要自己一步步完成。参考它的github网站。</p></blockquote><blockquote><p>如果你也选择了这个主题，很高兴接下来我将对这个主题进行一步步的探索，完善功能。<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus/wiki/yilia-plus%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA%E9%A1%BB%E7%9F%A5" target="_blank" rel="noopener">yilia-plus的构建须知</a>，值得注意的是需要安装ejs - 前端模板、sass - css预编译和webpack - 构建工具，都可以通过npm安装：</p></blockquote><pre class=" language-npm"><code class="language-npm">    npm install ejs    npm install -g sass    npm install webpack -g</code></pre><blockquote><p>关于主题的配置文件，参考作者提供默认配置即可，然后把作者的相关信息替换成自己的即可。注解已经很详细，就是功能尚不完善。</p></blockquote><blockquote><p>打开命令行进入博客根目录，执行如下命令：</p></blockquote><pre><code>   hexo clean  (清除public下的静态文件)   hexo g     （重新生成静态blog）   hexo d     （将本地blog部署到github的仓库）   //每次对博客更改后，都执行这几条命令，部署博客。</code></pre><blockquote><p>好了，试试在浏览器的地址栏输入：“你的github用户名.github.io”，你将会看到如下主题的blog页面：</p></blockquote><blockquote><p>当然，左侧的GIF动图和下雪特效以及头像等都需要修改<a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">主题目录</a>下的文件。<em>好了，关于主题我一时半会也讲不清楚，后续我会继续记录自己应用各种功能的过程，敬请关注！</em>看作者的博客请点击<a href="https://zhousiwei.gitee.io/" target="_blank" rel="noopener">这里</a>。</p></blockquote><ul><li><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3></li></ul><blockquote><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener" title="中文官网模板介绍">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p></blockquote><p>关于模板，只需要了解到它默认有三种形式（layout），分别是post，page和draft。当你执行创建一篇新的文章命令：</p><pre class=" language-hexo"><code class="language-hexo">    hexo new [layout] <title>  </code></pre><blockquote><p>如果不选择layout（模板）种类，默认是post，会根据配置信息在source文件夹下的_post文件夹下生成一个名为title.md的文件，如 hexo new “Hello world”。模板可以自定义。</p></blockquote><ul><li><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。简单的理解就是我们新建Markdown格式文章放在该文件夹下的_post文件夹下，就会被发布在博客网站上。<br>新建文章的指令上面我们已经提到，不再重复。注意，修改主目录下的_config.yml的</li></ul>{% asset_img asset.png assets %}<blockquote><p>Hexo将会在你每一次通过</p></blockquote><pre class=" language-hexo"><code class="language-hexo">    hexo new [layout] <title></code></pre><p>命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们。如你把一个 example.jpg 图片放在了你的资源文件夹中，正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><pre><code>  {% asset_img example.jpg This is an example image %}</code></pre><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><blockquote><p><strong>至此关于hexo的介绍就结束了，我只不过是把一些资料整理了下，按自己学习的历程介绍下，希望能有所帮助。</strong></p></blockquote><h2 id="浅谈Markdown"><a href="#浅谈Markdown" class="headerlink" title="浅谈Markdown"></a>浅谈Markdown</h2><blockquote><p>我们平时使用的word等软件一般是富文本编辑，富文本格式（Rich Text Format, 一般简称为RTF）是由微软公司开发的跨平台文档格式。最大的特点是：<strong>所见即所得</strong>。比如可以直接把字体变粗，添加颜色。</p></blockquote><blockquote><p>而Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。比如“ # 一级标题 ”用#号表示一级标题会把字体格式改变。</p></blockquote><blockquote><p>刚开始使用Markdown写文章都会感觉太笨了这种方法，熟练<a href="https://www.runoob.com/markdown/md-block.html" target="_blank" rel="noopener">Markdown的语法</a>规则后，发现比富文本好用很多，最大的优点就是格式统一，写出来的东西不会出现格式错误。</p></blockquote><blockquote><p>这里我推荐使用VScode+Markdown Preview Enhanced插件编写Markdown文章。我的本篇文章的Markdown格式上传<a href="https://gitee.com/moyanghualing/MoyangBlog" target="_blank" rel="noopener">gitee代码仓库</a>，用了大多数常见语法，对比网站效果，初学者加以参考！</p></blockquote><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><blockquote><p>博客一直是自己想拥有的，如今能借助别人的技术，完成一个不错的简易博客已经很满意了。特别感谢文章中提到的学习网站。</p></blockquote><ul><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的官方网站</a></li><li><a href="https://zhousiwei.gitee.io/" target="_blank" rel="noopener">試毅-思伟的个人博客</a></li><li><a href="https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html" target="_blank" rel="noopener">Hexo+github搭建个人博客</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
